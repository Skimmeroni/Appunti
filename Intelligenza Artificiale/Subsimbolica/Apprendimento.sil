\begin{sile}

	Si dice che un agente compie un \strong{apprendimento} se
	migliora le proprie prestazioni dopo aver compiuto delle
	osservazioni sull'ambiente. Quando l'agente in questione
	é un computer, si parla di \strong{machine learning}: il
	computer ricava dei dati, costruisce un modello sulla base
	di questi ultimi ed utilizza tale modello sia come ipotesi
	sul mondo che come software in grado di risolvere problemi.

	La programmazione tradizionale prevede essenzialmente di
	descrivere delle regole che, fornite ad un computer, risolvono
	un problema. Questo presuppone che il programmatore sappia
	\em{giá}, in una qualche misura, come risolverlo. Nel machine
	learning, il programmatore stabilisce un modo per produrre dati
	che addestri un algoritmo di apprendimento a descrivere tali
	regole in maniera automatica al suo posto.

	I motivi per investire su un agente in grado di apprendere
	sono fondamentalmente due. Il primo é che il designer non é
	in grado di anticipare ogni possibile situazione futura, ed
	é quindi necessario che sia l'agente stesso (eventualmente
	guidato) a prendersene carico. Il secondo é che alcuni
	problemi sono cosí complessi che nemmeno il designer é in
	grado di determinare come risolverli, eppure sufficientemente
	approcciabili da poter fornire gli strumenti all'agente per
	poterlo fare.

	\begin{itemize}
		\begin{item}
			Nel \strong{supervised learning} l'agente sviluppa
			modelli predittivi sia sulla base dell'input che
			dell'output. Nello specifico, osserva diverse coppie
			di input-output e cerca di determinare la funzione che
			meglio mappa ogni input al relativo output. Un esempio
			di supervised learning é la \strong{classificazione}:
			ai dati in input viene associata una \strong{label} ed
			i dati vengono raggruppati sulla base di tali label.
		\end{item}
		\begin{item}
			Nel \strong{unsupervised learning} l'agente cerca di
			individuare dei pattern solo a partire dall'input ma
			non dall'output. Un esempio di unsupervised learning
			é il \strong{clustering} \footnote{Talvolta, i termini
			"unsupervised learning" e "clustering" sono intesi
			come sinonimi, ma questo non é formalmente corretto.}:
			l'individuare delle proprietá comuni (cluster) nell'input
			e raggruppare l'input sulla base di tali proprietá, senza
			che i cluster siano noti a priori. 
		\end{item}
		\begin{item}
			Nel \strong{reinforcement learning} l'agente apprende
			mediante una serie di rinforzi, sia positivi (ricompense)
			che negativi (punizioni). In sostanza, l'agente cerca
			di determinare quali sono le azioni che minimizzano le
			punizioni e massimizzano le ricompense per poi applicarle.
		\end{item}
		\begin{item}
			Nell'\strong{instance-based learning} l'agente non costruisce
			alcun modello, ma (con tecniche di clustering o affini) si 
			limita ad individuare delle similaritá fra i dati che gli 
			vengono forniti, senza conoscenza pregressa.
		\end{item}
	\end{itemize}

	\bigskip

	Si noti come, nella maggior parte dei casi, un algoritmo di machine
	learning non prevede che questo debba costantemente apprendere, cosí
	come non debba necessariamente apprendere piú di una volta. Nonostante
	esistano alcuni algoritmi di machine learning basati sull'apprendimento
	continuo, in genere questi apprendono a partire da uno o piú dataset e
	mantengono indefinitamente la conoscenza acquisita. Similmente, le
	prestazioni di un algoritmo di machine learning non necessariamente
	migliorano aggiungendo nuovi dati alla sua conoscenza. Tali dati
	potrebbero infatti non fare altro che "confondere" l'immagine del
	mondo che l'algoritmo si é fatto.

	Nello specifico, esistono due metodi per far apprendere ad algoritmo
	di machine learning: \strong{batch learning} e \strong{online learning}.
	Nel primo, l'algoritmo viene addestrato a partire dall'intero dataset,
	mentre nel secondo l'algoritmo viene addestrato fornendogli i dati
	sequenzialmente, in maniera individuale o in piccoli gruppi detti 
	mini-batch. L'online learning permette di addestrare un algoritmo
	con un ammontare di dati che, se considerati tutti in una sola volta,
	richiederebbero risorse computazionali proibitive, ma richiede maggiore
	attenzione perché le informazioni apprese in ciascun istante possono
	influenzare ció che viene appreso negli istanti successivi. A tale
	scopo é necessario definire un \strong{learning rate}, ovvero quanto
	rapidamente debba l'algoritmo adattarsi alle nuove informazioni che
	vengono introdotte.

	\subsection{Supervised learning}

		L'obiettivo del supervised learning é il seguente: dato
		un \strong{training set} di \math{N} esempi, costituiti
		da coppie input-output \math{(x_{1}, y_{1}), (x_{2}, y_{2}),
		\unicodeellipsis, (x_{n}, y_{n})} generati da una funzione
		ignota \math{y = f(x)}, si trovi la funzione \math{h} che
		meglio approssima \math{f}. Si noti come \math{x_{i}} possa
		essere indifferentemente uno scalare oppure un vettore a
		\math{k} componenti.

		La funzione \math{h} viene chiamata \strong{ipotesi}, ed
		é estratta da uno \strong{spazio di ipotesi} \math{H} di
		possibili funzioni. Con un diverso vocabolario é possibile
		chiamare \math{h} il \strong{modello} dei dati, estratto da
		una \strong{classe di modelli} \math{H}, oppure come una
		\strong{funzione} estratta da una \strong{classe di funzioni}.
		I valori dell'output \math{y_{i}} vengono chiamati \strong{veritá
		di base}: rappresentano i valori "reali" che il modello deve
		cercare di prevedere. In prima battuta, é possibile considerare
		buona un'ipotesi \math{h} se, per ogni coppia input-output
		\math{(x_{i}, y_{i})}, \math{h(x_{i})} restituisce un valore
		che approssima bene \math{y_{i}}.

		\begin{example}
			Un esempio di supervised learning si ha nei filtri antispam
			dei client di posta elettronica. L'idea é quella di fornire
			al filtro un grande quantitativo di email contrassegnate come
			spam ed un grande quantitativo di email contrassegnate come
			non spam, di modo che questo possa estrarre dei pattern comuni
			nelle email spam e non spam. A questo punto, se viene fornita
			al filtro una mail qualsiasi, questo é (dovrebbe essere) in
			grado di determinare autonomamente se la mail é o non é spam. 
		\end{example}

	\subsection{Unsupervised learning}

		A differenza del supervised learning, nell'unsupervised
		learning non sono note a priori le classi in cui gli
		elementi del dataset vanno catalogati. L'idea é che i
		dati debbano prima venire esplorati per individuare se
		esistono fra loro dei pattern comuni, e poi classificare
		i dati sulla base di questi.

		Per determinati problemi, esistono soluzioni che sono
		intrinsecamente legate all'unsupervised learning. Un
		esempio é quello che viene chiamato \strong{dimensionality
		reduction}, ovvero la trasformazione di dati da uno spazio
		dimensionale ampio ad uno spazio dimensionale piú ristretto,
		senza che questo comporti una perdita (troppo) significativa
		di informazione. Un altro esempio é dato da \strong{anomaly
		detection}, ovvero riuscire ad identificare, dato un insieme
		di dati, quei (pochi) elementi che deviano in maniera
		significativa dalla maggioranza e la cui presenza non é
		giustificabile.

		\begin{example}
			Un esempio di unsupervised learning, in particolare di 
			anomaly detection, é il modo in cui le banche determinano
			se un pagamento é (potenzialmente) avvenuto senza la
			consapevolezza del titolare del conto bancario. L'idea é
			quella di individuare dei pattern negli acquisti fatti 
			usando una determinata carta (cosa viene comprato, a che
			orario, quanti soldi vengono spesi, ecc\ddd) e notificare
			il responsabile se viene effettuato un pagamento che devia
			sensibilmente dalla routine.
		\end{example}

		Sebbene le tecniche di clustering siano molto diverse, tutte
		fanno uso di una funzione (non necessariamente una metrica)
		di distanza, utilizzata per definire quanto due elementi del
		dataset siano \em{simili}: minore é la distanza, maggiore é
		la somiglianza.

		É evidente come il clustering e la classificazione siano fra
		loro legate: entrambe si occupano di determinare, fornito un
		certo input, a quale classe questo appartiene, ed entrambe
		portano a termine il compito mediante tecniche di machine
		learning. Eppure, le due differiscono notevolmente.

		Innanzitutto, nella classificazione, le classi sono note,
		mentre nel clustering queste non sono note (e devono venire
		invece dedotte a partire dal dataset stesso). Inoltre, nella
		classificazione é possibile tenere da parte dei dati ed
		utilizzarli per valutare le performance del modello, mentre
		nel clustering é molto piú complicato un approccio di questo
		tipo. Infine, dato che i nomi delle classi non sono noti a
		priori, un problema di clustering richiede che venga anche
		dato un "senso" alle classi che questo induce (ammesso che
		sia possibile farlo).

		Il clustering é molto piú "esplorativo" della classificazione,
		tanto che puó essere usato prima di operare un algoritmo di
		classificazione di modo da fornirgli una base d'appoggio.
		Ovvero, prima si approccia il problema come un problema di
		clustering, si analizzano le classi che questo induce,
		eventualmente se ne cambiano e/o se ne eliminano alcune e
		poi sulla base di questa etichettatura si opera un algoritmo
		di classificazione.

\end{sile}
