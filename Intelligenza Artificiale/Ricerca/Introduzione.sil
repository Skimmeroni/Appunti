\begin{sile}

	Non é sempre scontato quale debba essere l'azione che permette
	ad un agente razionale di massimizzare la sua funzione di prestazione.
	In questo caso, l'agente deve essere in grado di \em{programmare}: 
	individuare una sequenza di azioni che, intraprese, permettono di
	raggiungere uno stato obiettivo. Un agente con queste caratteristiche
	viene chiamato \strong{problem-solver} e la computazione che sottostá
	all'individuare tale sequenza prende il nome di \strong{ricerca}.

	La ricerca puó essere descritta sotto forma di algoritmo. É possibile
	classificare gli algoritmi in due classi: \strong{informati}, ovvero
	che operano in un ambiente del quale hanno tutte le informazioni in
	qualsiasi momento, e \strong{non informati}, dove una (piú o meno)
	grande parte di queste informazioni non é ottenibile in ogni momento.
	Un ambiente in cui opera un algoritmo informato é, di norma: accessibile,
	deterministico, episodico, statico e discreto.

	Un problem-solver con a disposizione questo livello di conoscenza
	sull'ambiente puó allora organizzare il processo di risoluzione
	del problema in quattro fasi:

	\begin{enumerate}
		\begin{item}
			\strong{Formulazione dell'obiettivo}. L'agente determina
			quale sia l'obiettivo da perseguire e, di conseguenza,
			guida il suo operato e le azioni che andrá a compiere
			in una certa direzione;
		\end{item}
		\begin{item}
			\strong{Formulazione del problema}. L'agente formula una 
			descrizione degli stati e le azioni necessarie a poter
			raggiungere tale obiettivo, ovvero un \em{modello} della
			parte di ambiente di interesse;
		\end{item}
		\begin{item}
			\strong{Formulazione della soluzione}. Prima di compiere
			una qualsiasi azione nel mondo reale, l'agente simula una
			sequenza di azioni sul modello, fino a trovarne una che
			gli permette di raggiungere l'obiettivo. Una sequenza con
			queste caratteristiche viene chiamata \strong{soluzione}.
			Si noti come l'agente possa dover formulare diverse sequenze
			che non sono soluzioni prima di riuscire a trovarne una, 
			oppure potrebbe determinare che una soluzione non esiste;
		\end{item}
		\begin{item}
			\strong{Esecuzione}. Una volta individuata una soluzione
			(se esiste), l'agente compie, uno alla volta, i passi di
			cui questa é costituita.
		\end{item}
	\end{enumerate}

	\bigskip

	In un ambiente accessibile, deterministico e discreto la soluzione
	ad ogni problema é una sequenza fissata \footnote{Nonostante questa
	situazione sembri irrealistica, diversi ambienti reali possono essere
	modellati in questo modo.}. Ovvero, una volta che tale soluzione é stata
	individuata, l'agente puó percorrerne i passi con la consapevolezza che,
	dall'uno all'altro, non é necessario ricavare percezioni aggiuntive
	dall'ambiente per rivalutare la soluzione presa. Questo tipo di
	approccio é chiamato \strong{closed loop}, ed é possibile solamente
	se l'ambiente possiede le caratteristiche sopra citate. Se l'ambiente
	fosse inaccessibile, non sarebbe possibile ottenere subito la soluzione
	per intero. Se l'ambiente fosse sequenziale o non deterministico,
	l'agente dovrebbe ricalcolare la soluzione ad ogni passo, perché le
	caratteristiche dell'ambiente sarebbero mutevoli.

	Formalmente, é possibile formulare un \strong{problema di ricerca}
	come segue:

	\begin{itemize}
		\begin{item}
			Un insieme di \strong{stati}, ovvero di \em{configurazioni}
			in cui l'ambiente puó trovarsi. Tale insieme viene chiamato 
			\strong{spazio degli stati}, e puó essere sia finito che
			infinito; 
		\end{item}
		\begin{item}
			Uno \strong{stato iniziale}, ovvero lo stato in cui l'agente
			inizia il suo operato;
		\end{item}
		\begin{item}
			Uno o piú \strong{stati obiettivo}, ovvero stati in cui il
			problema é risolto una volta che l'ambiente si trova in uno
			di questi. Se gli stati obiettivo sono piú di uno, allora si
			assume che il problema sia risolto a prescindere da quale di
			questi si raggiunge;
		\end{item}
		\begin{item}
			Le \strong{azioni} che l'agente puó compiere. Queste possono
			dipendere dallo stato in cui l'agente si trova oppure possono
			essere eseguite a prescindere. Dato uno stato \tt{s}, la funzione
			\tt{ACTIONS(s)} restituisce l'insieme di azioni che l'agente
			puó compiere se si trova in \tt{s}. Ciascuna di queste azioni
			si dice \strong{applicabile} in \tt{s};
		\end{item}
		\begin{item}
			Una \strong{funzione di transizione}, che descrive l'effetto che
			l'eseguire ciascuna azione comporta. Il cambiamento di stato,
			da uno stato di partenza ad uno stato di arrivo, per mezzo di
			una certa azione, prende il nome di \strong{transizione}. Dato
			uno stato \tt{s} ed una azione \tt{a}, la funzione \tt{RESULT(s,
			a)} restituisce lo stato che viene raggiunto se viene eseguita
			\tt{a} mentre ci si trova in \tt{s};
		\end{item}
		\begin{item}
			Opzionalmente, una \strong{funzione di costo}, che associa
			un valore numerico a ciascuna transizione. Dati due stati
			\tt{s} e \tt{s'} ed una azione \tt{a}, la funzione
			\tt{ACTION-COST(s, a, s')} restituisce il \em{costo} che
			comporta il passare da \tt{s} a \tt{s'} applicando \tt{a}.
			La funzione di costo rappresenta il "disincentivo" che
			l'agente ha nel compiere una determinata azione, per quanto
			possa essere necessaria a raggiungere lo stato obiettivo.
			Un problema di ricerca in cui la funzione di costo non é
			specificata puó essere pensato come avente una funzione di
			costo che assegna il medesimo costo a tutte le azioni
			\footnote{Da questo momento in poi, se non riportato
			esplicitamente, si assume di stare trattando problemi
			dove la funzione di ricerca non é definita.}.
		\end{item}
	\end{itemize}

	\bigskip

	Una qualsiasi sequenza di azioni forma un \strong{percorso};
	una soluzione non é altro che un percorso avente uno degli
	stati obiettivo come ultimo stato. A partire da uno stesso
	ambiente e da un agente capace di compiere le stesse azioni,
	cambiando gli stati obiettivo si ottiene un problema
	completamente diverso.

	Talvolta si ha interesse non a ricavare una soluzione qualsiasi,
	ma bensí una soluzione che rispecchia determinate caratteristiche,
	detta \strong{soluzione ottimale}. Se la funzione di costo é assente,
	la soluzione ottimale é in genere quella composta dal minimo numero
	di azioni. Se invece é presente una funzione di costo, la soluzione
	ottimale é quella che ha il costo complessivo piú piccolo: tale costo
	é dato dalla somma, eventualmente pesata, dei costi che comporta
	ciascuna transizione che avviene nel percorso. Anche le soluzioni
	ottimali possono non essere univoche.

	\begin{example}
		Si consideri una versione semplificata del gioco del Pacman,
		dove Pacman si trova in una griglia 4x4. Ciascuna cella della
		griglia é identificata da una coppia di coordinate, numerate
		da 1 a 4 lungo gli assi. Inizialmente, Pacman si trova nella
		cella in basso a sinistra, ovvero la cella (1, 1). A Pacman
		é permesso muoversi di una cella alla volta lungo i quattro
		assi cardinali, fintanto che non si muove in celle che si 
		trovano all'interno della griglia. A partire da questa
		situazione, é possibile costruire diversi problemi
		di ricerca.

		Si consideri un primo problema in cui l'obiettivo é raggiungere
		la cella in alto a destra, ovvero la cella (4, 4). Informalmente,
		il problema é cosí definito:

		\begin{itemize}
			\begin{item}
				Spazio degli stati: \tt{(1, 1), (1, 2), (1, 3), (1, 4),
				\ddd, (4, 3), (4, 4)}
			\end{item}
			\begin{item}
				Stato iniziale: \tt{(1, 1)}
			\end{item}
			\begin{item}
				Stato obiettivo: \tt{(4, 4)}
			\end{item}
			\begin{item}
				La funzione \tt{ACTIONS} ha in input una coppia
				di coordinate e restituisce le direzioni in cui
				Pacman puó muoversi senza uscire dalla griglia.
				Ad esempio, \tt{ACTIONS(2, 4)} restituisce
				\tt{\{E, W, S\}}
			\end{item}
			\begin{item}
				La funzione \tt{RESULT} ha in input una coppia di
				coordinate ed una azione e restituisce una nuova
				coppia di coordinate. Ad esempio \tt{RESULT(2, 4,
				W)} restituisce \tt{(1, 4)}
			\end{item}
		\end{itemize}

		\bigskip

		Una possibile soluzione potrebbe essere il percorso:

		\smallskip
		\begin{center}
			\begin{tt}
				(1, 1) \unichar{U+2192} (2, 1) \unichar{U+2192}
				(3, 1) \unichar{U+2192} (3, 2) \unichar{U+2192}
				(2, 2) \unichar{U+2192} (2, 3) \unichar{U+2192}
				(3, 3) \unichar{U+2192} (3, 4) \unichar{U+2192}
				(4, 4) 
			\end{tt}
		\end{center}
		\bigskip

		Tuttavia, tale soluzione non é ottimale. Infatti, una
		possibile soluzione ottimale é:

		\smallskip
		\begin{center}
			\begin{tt}
				(1, 1) \unichar{U+2192} (2, 1) \unichar{U+2192}
				(2, 2) \unichar{U+2192} (2, 3) \unichar{U+2192}
				(3, 3) \unichar{U+2192} (3, 4) \unichar{U+2192}
				(4, 4) 
			\end{tt}
		\end{center}
		\bigskip

		Si consideri un secondo problema, in cui l'obiettivo é quello
		di raccogliere tutte le pillole. In questo caso, ciascuna cella
		della griglia é identificata sia da una coppia di coordinate che
		da un valore booleano, che indica se la cella contiene o non
		contiene una pillola.

		Lo spazio degli stati di questa formulazione del problema
		é nettamente piú complessa, perché é necessario sia tenere
		traccia della posizione di Pacman in ogni istante sia delle
		pillole raccolte. Inoltre, non é piú rilevante la cella in
		cui Pacman si trova dopo aver raccolto tutte le pillole.

		\begin{itemize}
			\begin{item}
				Spazio degli stati:

				\begin{verbatim}
					((1, 1, F), (1, 2, T), (1, 3, T), \unichar{U+2026}, (4, 3, T), (4, 4, T)), (1, 1)
					((1, 1, F), (1, 2, F), (1, 3, T), \unichar{U+2026}, (4, 3, T), (4, 4, T)), (1, 2)
					((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, T), (4, 4, T)), (1, 2)
					((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, T), (4, 4, T)), (1, 3)
					[\unichar{U+2026}]
					((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, F), (4, 4, T)), (4, 3)
					((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, F), (4, 4, F)), (4, 4)
					[\unichar{U+2026}]
				\end{verbatim}
			\end{item}
			\begin{item}
				Stato iniziale:

				\begin{verbatim}
					(1, 1, F), (1, 2, T), (1, 3, T), \unichar{U+2026}, (4, 3, T), (4, 4, T)
				\end{verbatim}
			\end{item}
			\begin{item}
				Stati obiettivo:

				\begin{verbatim}
					((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, F), (4, 4, F)), (1, 1)
					((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, F), (4, 4, F)), (1, 2)
					[\unichar{U+2026}]
					((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, F), (4, 4, F)), (4, 4)
				\end{verbatim}
			\end{item}
			\begin{item}
				La funzione \tt{ACTIONS} é analoga alla precedente
			\end{item}
			\begin{item}
				La funzione \tt{RESULT} ha in input uno stato ed
				una azione e restituisce un nuovo stato in cui sia
				le coordinate sia il valore booleano delle celle
				viene aggiornato. Se la cella raggiunta aveva valore
				\tt{T}, viene cambiato in \tt{F}; se aveva valore
				\tt{F}, rimane invariato. Ad esempio:

				\begin{verbatim}
					RESULT(((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, F), (4, 4, T)), (4, 3), E) =
					       ((1, 1, F), (1, 2, F), (1, 3, F), \unichar{U+2026}, (4, 3, F), (4, 4, F)), (4, 4) 
				\end{verbatim}
			\end{item}
		\end{itemize}

		\bigskip

		Si noti come una formulazione di questo tipo, in cui l'intero
		stato viene passato come argomento di \tt{RESULT}, sarebbe 
		estremamente inefficiente se implementata sotto forma di 
		codice. Tuttavia, da un punto di vista strettamente matematico,
		la rappresentazione é corretta.
	\end{example}

	Lo spazio degli stati puó venire rappresentato sotto forma
	di grafo, detto \strong{state space graph}: i nodi del grafo
	corrispondono agli stati, gli archi corrispondono alle azioni
	che permettono di passare da uno stato all'altro ed il costo
	delle azioni é, se il problema ha associato una funzione di
	costo, l'etichetta dell'arco.

	Se lo spazio degli stati é un insieme finito, allora lo state
	space graph conterrá esattamente tanti nodi quanti sono gli
	stati; se lo spazio degli stati é un insieme infinito, non vi
	é modo di costruire il grafo per intero. Si noti peró come, in
	genere, uno space state graph é troppo grande per essere
	rappresentato per intero, anche se il numero di stati é finito;
	é invece preferibile costruire il grafo on-the-fly, sulla base
	di quali nodi é necessario rappresentare.

\end{sile}
