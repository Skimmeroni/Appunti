\begin{sile}

	Prende il nome di \strong{algoritmo di ricerca} un
	algoritmo che, avendo in input un problema di ricerca
	con una data istanza, restituisce in output una soluzione
	a tale problema se (almeno) una soluzione esiste, oppure
	un errore se non esiste alcuna soluzione.

	In termini molto generali, é possibile descrivere un algoritmo
	di ricerca in questo modo. Viene innanzitutto creato l'insieme
	\tt{PartialSolutionSet}, che inizialmente contiene il solo stato
	iniziale. Fintanto che l'insieme \tt{PartialSolutionSet} non é
	vuoto, l'algoritmo cerca di trovare una soluzione; se l'insieme
	si svuota, allora una soluzione non esiste.

	Il corpo del ciclo principale inizia estraendo uno dei
	percorsi di \tt{PartialSolutionSet} ed analizzando l'ultimo
	stato di tale percorso. Per ciascuna azione applicabile in
	tale stato, viene creato un insieme \tt{Successors} che
	contiene tutti gli stati raggiungibili a partire da tale
	stato compiendo tali azioni. Per ciascuno degli stati cosí
	raggiunti, si costruisce una \tt{potentialSolution} accodando
	tale stato al percorso corrente e si valuta se lo stato in
	questione é uno stato obiettivo: se lo é, allora
	\tt{potentialSolution} é effettivamente una soluzione e
	l'algoritmo la restituisce, altrimenti \tt{potentialSolution}
	viene aggiunta a \tt{PartialSolutionSet}.

	\begin{verbatim}
		procedure GENERIC-SEARCH(initialState, strategy)
		    PartialSolutionSet = [initialState]
		    while (PartialSolutionSet \unichar{U+2260} []) do
		        path \unichar{U+2190} CHOOSE-PATH(PartialSolutionSet, strategy)
		        lastState \unichar{U+2190} path[-1]
		        Successors \unichar{U+2190} []
		        foreach action in ACTIONS(lastState) do
		            Successors \unichar{U+2190} Successors \unichar{U+222A} \{RESULT(lastState, action)\}
		        foreach state in Successors do
		            potentialSolution \unichar{U+2190} path + state
		            if (state.type = "goal") then
		                return potentialSolution
		            else
		                PartialSolutionSet \unichar{U+2190} INSERT-PATH(PartialSolutionSet, potentialSolution, strategy)
		    return "No solution found"
	\end{verbatim}

	La funzione \tt{CHOOSE-PATH} determina quale dei percorsi finora
	costruiti debba essere quella da analizzare nell'iterazione corrente,
	mentre la funzione \tt{INSERT-PATH} inserisce il nuovo percorso appena
	costruito in una determinata posizione di \tt{PartialSolutionSet}.
	Entrambe dipendono da una certa \strong{strategia}, ovvero da un set
	di regole usate per determinare la scelta. L'adottare una strategia
	piuttosto che un'altra influisce notevolmente sulle prestazioni
	dell'algoritmo, perché prima un percorso che si rivelerá poi
	essere una soluzione viene analizzato e prima l'algoritmo termina
	(naturalmente, l'algoritmo non puó sapere in anticipo se il percorso
	in analisi é oppure non é una soluzione, altrimenti il problema non
	si porrebbe proprio).

	L'algoritmo ha due cicli for innestati, pertanto il tempo di
	esecuzione é approssimativamente quadratico nel numero degli
	stati. Ogni volta che all'algoritmo viene passato in input
	uno stato, questo ricalcola (se esiste) una soluzione che
	abbia quello stato come stato iniziale. Un algoritmo di
	questo tipo rientra nella categoria degli agenti guidati da
	modello e basati su obiettivi.

	Si noti come non esiste garanzia che l'algoritmo termini, perché
	é del tutto ammissibile poter ritornare ad uno stato giá visitato
	in precedenza, e l'algoritmo potrebbe bloccarsi in un loop infinito.

	Ci si chiede se é possibile costruire un algoritmo che rientri
	nella categoria degli agenti semplici. Tecnicamente, sarebbe
	possibile utilizzare l'algoritmo per costruire una sorta di
	lookup table, dove a ciascuno stato iniziale é associata la
	relativa soluzione; in questo modo, sarebbe necessario richiamare
	l'algoritmo una sola volta per ciascuno stato, dopodiché la soluzione
	per uno stato giá passato in input verrebbe restituita immediatamente.
	Difficilmente questo approccio potrebbe funzionare, perché un problema
	reale ha un numero di stati troppo grande; una singola esecuzione
	dell'algoritmo ripetuta per ogni possibile stato iniziale sarebbe
	comunque insostenibile. Inoltre, l'algoritmo presuppone che sia
	possibile ottenere tutte le informazioni dall'ambiente, ma questo
	é vero solamente se l'ambiente é accessibile.

	\begin{example}
		Nella prima versione del problema di Pacman dell'esempio
		precedente, un approccio di questo tipo é effettivamente
		possibile. Essendo il numero totale di stati 16, a ciascuno
		di questi é possibile associare uno dei possibili percorsi
		ottimali in una tabella di questo tipo:

		\begin{center}
			\begin[cols = 15%fw 70%fw]{ptable}
				\begin{row}
					\cell{\strong{Stato iniziale}} \cell{\strong{Soluzione}}
				\end{row}
				\begin{row}
					\cell{\tt{(1, 1)}}
					\begin{cell}
						\begin{tt}
							(1, 1) \unichar{U+2192} (2, 1) \unichar{U+2192}
							(2, 2) \unichar{U+2192} (2, 3) \unichar{U+2192}
							(3, 3) \unichar{U+2192} (3, 4) \unichar{U+2192}
							(4, 4) 
						\end{tt}
					\end{cell}
				\end{row}
				\begin{row}
					\cell{\tt{(2, 1)}}
					\begin{cell}
						\begin{tt}
							(2, 1) \unichar{U+2192} (2, 2) \unichar{U+2192}
							(2, 3) \unichar{U+2192} (3, 3) \unichar{U+2192}
							(3, 4) \unichar{U+2192} (4, 4) 
						\end{tt}
					\end{cell}
				\end{row}
				\begin{row}
					\cell{\tt{(3, 1)}}
					\begin{cell}
						\begin{tt}
							(3, 1) \unichar{U+2192} (3, 2) \unichar{U+2192}
							(3, 3) \unichar{U+2192} (3, 4) \unichar{U+2192}
							(4, 4) 
						\end{tt}
					\end{cell}
				\end{row}
				\begin{row}
					\cell{\tt{\ddd}}
					\cell{\tt{\ddd}}
				\end{row}
				\begin{row}
					\cell{\tt{(3, 4)}}
					\begin{cell}
						\begin{tt}
							(3, 4) \unichar{U+2192} (4, 4) 
						\end{tt}
					\end{cell}
				\end{row}
				\begin{row}
					\cell{\tt{(4, 4)}}
					\begin{cell}
						\begin{tt}
							(4, 4) 
						\end{tt}
					\end{cell}
				\end{row}
			\end{ptable}
		\end{center}
		\par\smallskip

		Applicare un approccio simile alla seconda versione del problema
		diviene invece del tutto irrealistico, dato che il numero totale
		di stati é troppo grande.
	\end{example}

	Lo space state graph non si adatta bene a rappresentare le
	soluzioni fornite da \tt{GENERIC-SEARCH}, perché i percorsi
	e le soluzioni sono difficili da evidenziare esplicitamente.
	Una rappresentazione migliore é quella offerta da una struttura
	ad albero detta \strong{albero di ricerca}; ciascun nodo corrisponde
	ad uno degli stati nello spazio degli stati, mentre gli archi
	corrispondono alle azioni che costituiscono le transizioni. La
	radice dell'albero corrisponde allo stato iniziale del problema.

	A differenza dello state space graph, dove ogni nodo é univocamente
	uno stato, nell'albero di ricerca diversi nodi possono riferirsi 
	allo stesso stato. Questo rende gli alberi di ricerca meno efficienti
	in termini di spazio occupato, perché questi avranno un numero di nodi
	pari o superiore allo state space graph equivalente. Il vantaggio degli
	alberi di ricerca é che per identificare una soluzione é sufficiente 
	seguire un percorso che va dal nodo iniziale ad un nodo foglia che ha
	associato uno stato obiettivo.

	É possibile tradurre l'algoritmo di ricerca generico in termini di
	alberi. L'albero, \tt{Tree}, inizialmente contiene il solo nodo
	radice, cosí come l'insieme \tt{Leaves}, detto \strong{frontiera},
	che riporta tutti i nodi foglia. Fintanto che l'insieme \tt{Leaves}
	non é vuoto, l'algoritmo cerca di trovare una soluzione; se l'insieme
	si svuota, allora una soluzione non esiste. Ciascun nodo puó essere
	pensato come una struttura a due campi: un campo \tt{parent} che
	indica il rispettivo nodo genitore ed un campo \tt{state} che
	indica lo stato a cui il nodo é associato. \tt{Leaves} é, in
	genere, implementato con una coda, mentre \tt{Tree} puó essere
	una qualsiasi rappresentazione usata per gli alberi.

	Il corpo del ciclo principale inizia estraendo \tt{nodeToExpand},
	uno dei nodi in \tt{Leaves}, attraverso una determinata strategia;
	il nodo viene rimosso da \tt{Leaves}. Viene poi analizzato lo stato
	associato a tale nodo, ovveor \tt{nodeToExpand.state}: se questo é
	uno stato obiettivo, allora si ricostruisce una soluzione salendo di
	nodo in nodo attraverso il campo \tt{parent} fino a trovare la radice,
	che é identificabile univocamente essendo l'unico nodo ad avere
	\tt{NULL} come valore per questo campo.

	Se invece \tt{nodeToExpand.state} non é uno stato obiettivo, viene
	applicata a \tt{nodeToExpand} l'operazione di \strong{espansione}.
	Questa consiste nel costruire tanti nodi \tt{newNode} per ciascuna
	azione applicabile in \tt{nodeToExpand.state}, ciascuno avente tale
	azione come campo \tt{action} e avente \tt{nodeToExpand} come campo
	\tt{parent}. Tale nodo viene poi aggiunto a \tt{Leaves}, mentre a
	\tt{Tree} viene aggiunta una tupla che ha \tt{nodeToExpand} e
	\tt{newNode} come elementi, che rappresenta la transizione compiuta
	dagli stati riferiti ai due nodi.

	\begin{verbatim}
		procedure GENERIC-TREE-SEARCH(initialState, strategy)
		    root.state \unichar{U+2190} initialState
		    root.parent \unichar{U+2190} NULL
		    Leaves \unichar{U+2190} [root]
		    Tree \unichar{U+2190} [root]

		    \bigskip
		    while (Leaves \unichar{U+2260} []) do
			    nodeToExpand \unichar{U+2190} EXTRACT-LEAF(Leaves, strategy)
			    if (nodeToExpand.state.type = "goal") then
			        thisNode = nodeToExpand
			        Solution = []
			        do
			            Solution \unichar{U+2190} Solution + thisNode
			            thisNode \unichar{U+2190} thisNode.parent
			        while (thisNode.parent \unichar{U+2260} NULL)
			        return Solution
			    else
			        foreach action in ACTIONS(nodeToExpand.state) do
			            newLeaf.state \unichar{U+2190} RESULT(nodeToExpand.state, action)
			            newLeaf.parent \unichar{U+2190} nodeToExpand
			            Leaves \unichar{U+2190} ADD-TO-QUEUE(Leaves, newLeaf, strategy)
			            Tree \unichar{U+2190} Tree \unichar{U+222A} (nodeToExpand, newLeaf)

			\bigskip
		    return "No solution found"
	\end{verbatim}

	\tt{GENERIC-SEARCH} e \tt{GENERIC-TREE-SEARCH} sono di fatto
	equivalenti. Il vantaggio di \tt{GENERIC-TREE-SEARCH} é che
	utilizza una rappresentazione "standardizzata", quella ad 
	albero, che permette di utilizzare strutture dati note per
	tenere traccia delle computazioni (\tt{GENERIC-SEARCH} non
	specifica che strutture dati utilizzare). Assumendo che la
	frontiera sia implementata per mezzo di una coda, \tt{strategy}
	determina solamente il tipo di coda in questione e qual'é il
	nodo scelto di volta in volta per essere espanso.

	L'algoritmo verrebbe ulteriormente ottimizzato osservando come
	l'espansione di uno stesso nodo potrebbe ripresentarsi piú volte.
	A tale scopo, é possibile tenere traccia di tutti i nodi giá
	espansi salvando il risultato dell'espansione in una struttura
	dati a parte, \tt{expanded}, ed utilizzarla per velocizzare le
	computazioni successive. In questo modo, quando viene trovato
	un nodo da espandere, prima si controlla se il risultato
	dell'espansione é giá presente in \tt{expanded}; se lo é, si
	estrae da questa il risultato, altrimenti il nodo viene espanso
	normalmente e si salva in \tt{expanded} il risultato.

	Le diverse incarnazioni di \tt{GENERIC-SEARCH} e di
	\tt{GENERIC-TREE-SEARCH} vengono valutate sulla base
	di quattro metriche:

	\begin{itemize}
		\begin{item}
			\strong{Completezza}. Un algoritmo di ricerca si dice
			\strong{completo} se garantisce di trovare una soluzione
			nel caso in cui questa esista;
		\end{item}
		\begin{item}
			\strong{Ottimalitá}. Un algoritmo di ricerca si dice
			\strong{ottimale} se la soluzione che restituisce é
			una soluzione ottima;
		\end{item}
		\begin{item}
			\strong{Complessitá in tempo}, nel caso peggiore; 
		\end{item}
		\begin{item}
			\strong{Complessitá in spazio}, nel caso peggiore. 
		\end{item}
	\end{itemize}

	\bigskip

	La completezza di un algoritmo di ricerca é influenzata (anche)
	dallo spazio di stati su cui questo opera. Se lo spazio di stati
	in questione é finito, allora l'algoritmo di ricerca sará certamente
	completo, perché prima o poi tutti i nodi verranno raggiunti ed
	espansi. Se lo spazio di stati é infinito ma é noto che almeno una
	soluzione esista, un algoritmo di ricerca \em{potrebbe} comunque 
	essere completo a seconda di come é stato implementato. Se invece
	lo spazio di stati é infinito e non esiste nessuna soluzione,
	allora qualsiasi algoritmo di ricerca non sará mai completo,
	perché su qualsiasi istanza del problema incorrerrá in un loop
	infinito.

	In genere, le prestazioni di un algoritmo che opera su un
	grafo sono espresse in termini della cardinalitá del suo
	insieme di archi e della cardinalitá del suo insieme di
	vertici. Questa é la scelta migliore nel caso in cui il
	grafo sia \strong{esplicito}, ovvero dove é effettivamente
	rappresentato sotto forma di stati e di archi.

	Gli algoritmi di ricerca operano invece su un grafo "indotto",
	\strong{implicito}, dove la loro dimensione non è nota a priori.
	Per questo motivo, si preferisce valutare le prestazioni
	dell'algoritmo in termini di \strong{profonditá}, indicato con
	\math{m}, e \strong{branching factor}, indicato con \math{b}:
	la prima indica massimo numero di nodi che puó andare a costituire
	una soluzione, mentre la seconda indica il massimo numero di
	successori che ciascun nodo puó avere.

	Idealmente é possibile visualizzare questi parametri "inscrivendo"
	l'albero in un triangolo avente altezza \math{m} e base \math{b}.
	Se ogni nodo puó avere al piú \math{b} nodi successori, al primo
	livello dell'albero vi saranno \math{b^{0}} nodi (la sola radice),
	al secondo livello dell'albero vi saranno \math{b^{1}} nodi, al
	terzo livello dell'albero \math{b^{2}} nodi, ecc\ddd Questo
	significa che il numero di nodi dell'intero albero di ricerca é
	certamente non superiore a \math{O(b^{m})}.

\end{sile}
