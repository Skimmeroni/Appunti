\begin{sile}

        Dato un grafo \math{G = (V, E)}, una \strong{visita in profonditá},
        o \strong{Depth-First Search} (\strong{DFS}) visita il grafo di
        vertice adiacente in vertice adiacente fintanto che é possibile,
        raggiungendo tutti i vertici del grafo. Concettualmente, una DFS
        opera come segue:

        \begin{enumerate}
            \begin{item}
                Viene visitata la sorgente \math{s};
            \end{item}
            \begin{item}
                Viene visitato il primo adiacente \math{a1} di \math{s},
                poi viene visitato il primo adiacente \math{a2} di \math{a1},
                poi visita il primo adiacente \math{a3} di \math{a2},
                \math{\unicodeellipsis}
            \end{item}
            \begin{item}
                Quando viene raggiunto un vertice che non ha adiacenti da
                visitare si risale al predecessore e la visita riparte (se
                possible) da un altro adiacente di tale predecessore;
            \end{item}
            \begin{item}
                Ogni volta che non ci sono adiacenti da visitare si risale al
                predecessore;
            \end{item}
            \begin{item}
                Quando la visita risale alla sorgente e \math{s} non ha più
                adiacenti da visitare, si sceglie una nuova sorgente e la
                visita riparte;
            \end{item}
            \begin{item}
                La visita termina quando non ci sono più vertici disponibili
                per essere scelti come nuova sorgente.
            \end{item}
        \end{enumerate}

        \bigskip

        L'algoritmo per la visita in profonditá di un grafo necessita di 
        assegnare degli attributi ai suoi vertici. Per ciascun vertice
        \math{v}, gli attributi sono i seguenti:

        \begin{enumerate}
                \begin{item}
                        Un colore, indicato con \math{v.color}, che
                        rappresenta lo stato del vertice all'iterazione
                        corrente. I possibili colori sono tre:

                        \begin{itemize}
                                \begin{item}
                                        Bianco: il vertice non é stato ancora scoperto;
                                \end{item}
                                \begin{item}
                                        Grigio: il vertice é stato scoperto;
                                \end{item}
                                \begin{item}
                                        Nero: il vertice e tutti i vertici
                                        a questo adiacenti sono stati visitati;
                                \end{item}
                        \end{itemize}
                \end{item}
                \begin{item}
                        Il predecessore di tale vertice nel cammino dalla
                        sorgente, indicato con \math{v.\pi};
                \end{item}
                \begin{item}
                        L'istante temporale in cui il vertice é stato
                        scoperto, detto \strong{tempo di scoperta} ed
                        indicato con \math{v.d};
                \end{item}
                \begin{item}
                        L'istante temporale in cui il vertice é stato 
                        completamente esplorato, detto \strong{tempo di
                        completamento} ed indicato con \math{v.f}.
                \end{item}
        \end{enumerate}

        \bigskip

        All'inizio della visita, a ciascun vertice viene assegnato il colore
        bianco, un tempo di scoperta pari a 0, un tempo di completamento pari
        a 0 ed un valore \math{\pi} pari a NULL. Dopo la visita tutti i
        vertici avranno assegnato il colore nero, perché ogni vertice é
        sempre elegibile a sorgente (quindi anche un vertice isolato puó
        comunque venire raggiunto). Inoltre, dopo la visita, il campo
        \math{\pi} sará rimasto NULL solamente per quei vertici che sono
        stati scelti come sorgente, perché per definizione le sorgenti non
        hanno un predecessore. Infine, un vertice puó avere assegnato il
        colore grigio solamente \em{durante} la visita, mai prima e mai dopo.

        L'algoritmo per la visita in profonditá di un grafo é presentato di 
        seguto. Questo, dopo aver inizializzato gli attributi di ciascun 
        vertice (righe 1-5) e aver inizializzato una variabile globale
        \tt{time} a zero, chiama la subroutine \tt{DFS-VISIT} per operare
        la visita in profonditá vera e propria.

        \begin[width = 50%fw]{parbox}
		\begin{verbatim}
			procedure DFS(G)
			 1    foreach v ∈ V do
			 2        v.color \unichar{U+2190} W
			 3        v.π \unichar{U+2190} NULL
			 4        v.d \unichar{U+2190} 0
			 5        v.f \unichar{U+2190} 0
			 6    time \unichar{U+2190} 0
			 7    foreach v ∈ V do
			 8        if v.color = W then
			 9            DFS-VISIT(G, v)
		\end{verbatim}
	\end{parbox}
	\begin[width = 50%fw]{parbox}
		\begin{verbatim}
			procedure DFS-VISIT(G, u)
			10    time \unichar{U+2190} time + 1
			11    u.d \unichar{U+2190} time
			12    u.color \unichar{U+2190} G
			14    foreach v ∈ adj(u) do
			15        if v.color = W then
			16            v.π \unichar{U+2190} u
			17            DFS-VISIT(G, v)
			18    u.color \unichar{U+2190} B
			19    time \unichar{U+2190} time + 1
			20    u.f \unichar{U+2190} time
		\end{verbatim}
	\end{parbox}
	\par

        Il valore di \tt{time} viene incrementato di uno ogni volta che
        viene chiamata la subroutine \tt{DFS-VISIT} per un vertice \math{u}
        (riga 10), e viene assegnato al valore di \math{u.d} (riga 11). Tale
        subroutine inizia una visita in profonditá con \math{u} come radice;
        quando questa termina, al vertice \math{u} sará assegnato un tempo
        di scoperta (l'istante in cui \math{u} é diventato un vertice grigio)
        ed un tempo di completamento (l'istante in cui \math{u} é diventato
        un vertice nero). Naturalmente, deve aversi \math{u.f < u.d}. La
        differenza fra \math{u.f} e \math{u.d} restituisce il lasso di
        tempo che é stato necessario per esplorare completamente il vertice
        \math{u}.

        A questo punto (righe 14-17) vengono esplorati tutti i vertici
        adiacenti ad \math{u}, impostando \math{u} come predecessore di
        ciascuno di questi. Quando non é piú possibile procedere con una
        visita a partire da \math{u}, a questo viene assegnato il colore
        nero ed il relativo tempo di completamento (righe 18-20), dopodiché
        \tt{DFS} opera una nuova visita in profonditá con uno dei vertici
        ancora bianchi (se ce ne sono) come sorgente. L'algoritmo termina
        quando a tutti i vertici del grafo é assegnato il colore nero.

        Il tempo di esecuzione per l'inizializzazione (righe 1-5) é
        \math{O(\abs{V})}, dato che vengono eseguite delle operazioni
        con tempo di esecuzione unitario una volta per ogni vertice.
        La subroutine \tt{DFS-VISIT} viene chiamata esattamente una
        volta per ciascun vertice del grafo, perché \tt{DFS-VISIT} viene
        invocata soltanto se un vertice é bianco e la sua prima istruzione
        prevede di assegnarvi il colore grigio. Durante un'esecuzione di
        \tt{DFS-VISIT}, il ciclo alle righe da 14 a 17 viene eseguito una
        volta per ciascun vertice adiacente al vertice in esame. Dato che
        il numero complessivo di tutti i vertici adiacenti ad un vertice é
        al massimo pari al numero di archi del grafo, tale ciclo ha un 
        tempo di esecuzione pari a \math{O(\abs{E})}. Il tempo di esecuzione
        complessivo dell'algoritmo é allora \math{O(\abs{V}) + O(\abs{E})}.
 
        Diversamente da ció che accade in una visita in ampiezza, una
        visita in profonditá induce una foresta di alberi, non un albero
        solo, perché questa puó essere ripetuta da piú sorgenti. Il
        \strong{sottografo dei predecessori} di una visita in profonditá
        é quindi definito come \math{G_{\pi} = (V, E_{\pi})}, dove l'insieme
        dei vertici \math{V} coincide con l'insieme dei vertici del grafo e:

        \begin[mode = display]{math}
                E_{\pi} = \{(v.\pi, v) : v \in V \wedge v.\pi \ne \mi{NULL}\}
        \end{math}

        Il sottografo dei predecessori di una visita in profonditá forma una
        \strong{foresta DF}, composta da uno o piú \strong{alberi DF}. Tale
        sottografo forma effettivamente una foresta perché la struttura degli
        alberi DF rispecchia la struttura delle chiamate ricorsive di 
        \tt{DFS-VISIT}. Ovvero, dati due vertici \math{u} e \math{v}, si ha
        \math{u = v.\pi} se e soltanto se \tt{DFS-VISIT(v)} é stata chiamata
        durante una visita degli adiacenti di \math{u}. Inoltre, il vertice
        \math{v} é un discendente del vertice nella foresta DF se e soltanto
        se \math{v} viene scoperto durante il lasso di tempo in cui \math{u}
        é un vertice grigio.

        Un'interessante proprietá della visita in profonditá é che i
        tempi di scoperta e di completamento hanno una \strong{struttura
        di parentesi}. Ovvero, se per ciascun vertice \math{v}, si rappresenta
        il suo tempo di scoperta come una parentesi aperta ed il suo tempo di
        completamento come una parentesi chiusa, allora l'insieme di tutti i
        tempi di tutti i vertici produce una formula ben formata per la
        grammatica delle parentesi.

        \pagebreak

        \begin{theorem}
            \strong{Teorema delle parentesi}. Dato un grafo \math{G = (V, E)}
            orientato e non pesato, si operi una visita in profonditá su tale
            grafo. Si consideri una coppia di vertici \math{u} e \math{v}
            ed i relativi intervalli \math{(u.d, u.f)} e \math{(v.d, v.f)}:

            \begin{itemize}
                \begin{item}
                    \math{(u.d, u.f)} contiene \math{(v.d, v.f)}. Allora
                    \math{u} e \math{v} si trovano in uno stesso albero della
                    foresta DF, ed in particolare \math{u} é un predecessore
                    di \math{v};
                \end{item}
                \begin{item}
                    \math{(v.d, v.f)} contiene \math{(u.d, u.f)}. Allora
                    \math{u} e \math{v} si trovano in uno stesso albero della
                    foresta DF, ed in particolare \math{v} é un predecessore
                    di \math{u};
                \end{item}
                \begin{item}
                    \math{(v.d, v.f)} e \math{(u.d, u.f)} sono intervalli
                    disgiunti. Allora \math{u} e \math{v} si trovano in due
                    alberi distinti della foresta DF.
                \end{item}
            \end{itemize}

            \bigskip

            \strong{Dimostrazione}. Si consideri la situazione \math{u.d <
            v.d} (la situazione opposta é del tutto analoga, basta invertire
            i vertici). Possono presentarsi due casi:

            \begin{itemize}
                \begin{item}
                    \math{v.d < u.f}. Questo significa che \math{v} é
                    stato scoperto dopo il tempo di scoperta di \math{u}
                    ma prima del tempo di fine esplorazione di \math{u},
                    il che significa che \math{v} é un discendente di 
                    \math{u}. Inoltre, poiché \math{v} é stato scoperto
                    prima di \math{u}, verrá completamente esplorato prima
                    della completa esplorazione di \math{u}. Ne segue che i
                    vari tempi coinvolti sono disposti nell'ordine:

                    \begin[mode = display]{math}
                        u.d < v.d < v.f < u.f
                    \end{math}

                    Che equivale a dire che l'intervallo \math{(v.d, v.f)} é 
                    interamente contenuto nell'intervallo \math{(u.d, u.f)}
                \end{item}
                \begin{item}
                    \math{u.f < v.d}. In questo caso, i due intervalli sono 
                    completamente disgiunti, in quanto l'ordine ottenuto é il
                    seguente:

                    \begin[mode = display]{math}
                        u.d < u.f < v.d < v.f
                    \end{math}

                    Infatti, questo equivale a dire che nessuno dei due
                    vertici é stato scoperto mentre l'altro era grigio.
                    Ne segue che anche \math{u} e \math{v} non sono
                    discendenti l'uno dell'altro.
                \end{item}
            \end{itemize}
        \end{theorem}

        Un'altra proprietá della visita in profonditá é che questa puó
        essere utilizzata per classificare gli archi del grafo in input.
        É possibile definire quattro tipi di archi in base alla foresta
        DF prodotta da una visita in profonditá di un grafo:

        \begin{itemize}
            \begin{item}
                \strong{Arco d'albero}, indicato con la lettera \strong{T}.
                Sono gli archi nella foresta DF. Un arco \math{(u, v)} é un
                arco d'albero se \math{v} viene scoperto la prima volta
                durante l'esplorazione di \math{(u, v)}; 
            \end{item}
            \begin{item}
                \strong{Arco all'indietro}, indicato con la lettera \strong{B}.
                Sono quegli archi \math{(u, v)} che collegano un vertice
                \math{u} ad un antenato \math{v} in un albero DF;
            \end{item}
            \begin{item}
                \strong{Arco in avanti}, indicato con la lettera \strong{F}.
                Sono quegli archi \math{(u, v)} che collegano un vertice
                \math{u} ad un vertice \math{v} in un albero DF;
            \end{item}
            \begin{item}
                \strong{Arco trasversale}, indicato con la lettera \strong{C}.
                Possono connettere i vertici nello stesso albero DF, purché
                un vertice non sia antenato dell'altro, oppure possono
                connettere vertici di alberi DF differenti.
            \end{item}
        \end{itemize}

        \bigskip

        L'algoritmo per la visita in profonditá contiene abbastanza
        informazioni per classificare gli archi che incontra. Infatti,
        ogni arco \math{(u, v)} puó essere classificato in base al
        colore del vertice \math{v} che viene raggiunto quando l'arco
        viene ispezionato per la prima volta:

        \begin{enumerate}
                \begin{item}
                        Se \math{v} é bianco, allora \math{(u, v)} é un
                        arco d'albero. Questo é vero per definizione: se
                        gli archi d'albero sono gli archi dove il vertice
                        di arrivo non é stato ancora scoperto, allora tale
                        vertice é un vertice bianco;
                \end{item}
                \begin{item}
                        Se \math{v} é grigio, allora \math{(u, v)} é un arco
                        all'indietro. Si noti infatti come i vertici grigi
                        formino sempre una catena lineare di discendenti che
                        corrisponde allo stack delle chiamate attive di
                        \tt{DFS-VISIT}; il numero di vertici grigi é uno in
                        piú della profonditá dell'ultimo vertice scoperto.
                        L'ispezione procede sempre a partire dal vertice
                        grigio piú profondo, quindi un arco che raggiunge
                        un altro vertice grigio raggiunge un antenato;
                \end{item}
                \begin{item}
                        Se \math{v} é nero e \math{(u.d < v.d)}, allora
                        \math{(u, v)} é un arco in avanti. Questo perché
                        \math{v} é stato completamente esplorato ma \math{u}
                        é stato scoperto prima di \math{v}, quindi \math{v}
                        é un discentente di \math{u} in uno stesso albero;
                \end{item}
                \begin{item}
                        Se \math{v} é nero \math{(u.d > v.d)}, allora
                        \math{(u, v)} é un arco trasversale. Questo perché
                        \math{v} é stato completamente esplorato ma \math{u}
                        é stato scoperto dopo \math{v}, quindi \math{v} e
                        \math{u} non possono fare parte dello stesso albero.
                \end{item}
        \end{enumerate}

        \bigskip

	\begin[width = 50%fw]{parbox}
		\begin{verbatim}
			procedure DFS(G)
			 1    foreach v ∈ V do
			 2        v.color \unichar{U+2190} W
			 3        v.π \unichar{U+2190} NULL
			 4        v.d \unichar{U+2190} 0
			 5        v.f \unichar{U+2190} 0
			 6    time \unichar{U+2190} 0
			 7    foreach v ∈ V do
			 8        if v.color = W then
			 9            DFS-VISIT(G, v)
		\end{verbatim}
	\end{parbox}
	\begin[width = 50%fw]{parbox}
		\begin{verbatim}
			procedure DFS-VISIT(G, u)
			10    time \unichar{U+2190} time + 1
			11    u.d \unichar{U+2190} time
			12    u.color \unichar{U+2190} G
			13    foreach v ∈ adj(u) do
			14        if v.color = W then
			15            (u, v) \unichar{U+2190} "arco T"
			16            v.π \unichar{U+2190} u
			17            DFS-VISIT(G, v)
			18        else
			19            if v.color = G then
			20                (u, v) \unichar{U+2190} "arco B"
			21            else
			22                if u.d < v.d then
			23                    (u, v) \unichar{U+2190} "arco F"
			24                else
			25                    (u, v) \unichar{U+2190} "arco C"
			26    u.color \unichar{U+2190} B
			27    time \unichar{U+2190} time + 1
			28    u.f \unichar{U+2190} time
		\end{verbatim}
	\end{parbox}
	\par

        In un grafo non orientato potrebbe presentarsi una ambiguitá nella
        classificazione degli archi, perché \math{(u, v)} e \math{(v, u)}
        sono di fatto lo stesso arco. In tal caso, l'arco viene classificato
        come il primo tipo della lista di classificazione che puó essere
        applicato.

	\begin[width = 50%fw]{parbox}
		\begin{verbatim}
			procedure DFS(G)
			 1    foreach v ∈ V do
			 2        v.color \unichar{U+2190} W
			 3        v.π \unichar{U+2190} NULL
			 4        v.d \unichar{U+2190} 0
			 5        v.f \unichar{U+2190} 0
			 6    time \unichar{U+2190} 0
			 7    foreach v ∈ V do
			 8        if v.color = W then
			 9            DFS-VISIT(G, v)
		\end{verbatim}
	\end{parbox}
	\begin[width = 50%fw]{parbox}
		\begin{verbatim}
			procedure DFS-VISIT(G, u)
			10    time \unichar{U+2190} time + 1
			11    u.d \unichar{U+2190} time
			12    u.color \unichar{U+2190} G
			13    foreach v ∈ adj(u) - \{u.π\} do
			14        if v.color = W then
			15            print "arco T"
			16            v.π \unichar{U+2190} u
			17            DFS-VISIT(G, v)
			18        else
			19            print "arco B"
			20    u.color \unichar{U+2190} B
			21    time \unichar{U+2190} time + 1
			22    u.f \unichar{U+2190} time
		\end{verbatim}
	\end{parbox}
	\par

        Il motivo per cui in un grafo non orientato non si presentano tutte e
        quattro le casistiche é spiegato nel seguente teorema.

        \begin{theorem}
                Un grafo non orientato, dopo una visita in profonditá, ha
                solo archi d'albero e archi all'indietro. 
        \end{theorem}

\end{sile}
