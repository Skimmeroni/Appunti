\begin{sile}

	\subsection{Definizione del problema}

		Data una sequenza \math{S}, si dice \strong{sottosequenza}
		di \math{S} un qualsiasi sottoinsieme degli elementi di
		\math{S}, disposti secondo l'ordine in cui appaiono. Piú
		formalmente, una sottosequenza di lunghezza \math{n} di
		una sequenza \math{S} é definita da un insieme di indici
		\math{i_{1} < i_{2} < \unicodeellipsis < i_{k}}, tale per
		cui \math{k \leq n}; la sottosequenza che si ricava da questi
		indici é \math{S[i_{1}] | S[i_{2}] | \unicodeellipsis | S[i_{k}]}.

		Date due sequenze \math{X} e \math{Y}, una sottosequenza si
		dice comune ad entrambe le sequenze se appare sia in \math{X}
		che in \math{Y}. Il problema della sottosequenza comune piú
		lunga consiste nel trovare, in due stringhe \math{X} ed \math{Y},
		qual'é (se esiste) la sottosequenza comune ad entrambe che sia di
		lunghezza maggiore, abbreviata con \math{LCS} (\em{longest common
		subsequence}).

	\subsection{Programmazione dinamica: sottostruttura ottima}

		\begin{theorem}
			\strong{Proprietá della sottostruttura ottima per il problema
			Longest Common Subsequence}. Siano \math{X = \langle x_{1},
			x_{2}, \unicodeellipsis, x_{m} \rangle} e \math{Y = \langle
			y_{1}, y_{2}, \unicodeellipsis, y_{n} \rangle} due sequenze.
			Sia poi \math{Z =  \langle z_{1}, z_{2}, \unicodeellipsis,
			z_{k} \rangle} una LCS di \math{X} e di \math{Y}. Possono
			presentarsi tre situazioni:

			\begin{enumerate}
				\begin{item}
					Se \math{x_{m} = y_{n}}, allora \math{z_{k} = x_{m} =
					y_{n}} e \math{Z_{k - 1}} é una LCS di \math{X_{m - 1}}
					e \math{Y_{n - 1}};
				\end{item}
				\begin{item}
					Se \math{x_{m} \ne y_{n}}, allora \math{z_{k} \ne x_{m}}
					implica che \math{Z} é una LCS di \math{X_{m - 1}} e
					\math{Y};
				\end{item}
				\begin{item}
					Se \math{x_{m} \ne y_{n}}, allora \math{z_{k} \ne y_{n}}
					implica che \math{Z} é una LCS di \math{X} e
					\math{Y_{n - 1}};
				\end{item}
			\end{enumerate}

			\bigskip

			\strong{Dimostrazione}. La dimostrazione procede caso per caso:

			\begin{enumerate}
				\begin{item}
					Si assuma per assurdo che \math{z_{k} \ne x_{m}}.
					Si accodi allora \math{x_{m} = y_{n}} a \math{Z},
					ottenendo la stringa \math{Z' = \langle z_{1}, z_{2},
					\unicodeellipsis, z_{k}, x_{m} \rangle}. Tale stringa
					ha lunghezza \math{k + 1} e, essendo \math{x_{m} =
					y_{n}}, é una LCS per \math{X} e \math{Y}. Ma allora
					\math{Z} non puó essere una LCS per \math{X} e \math{Y},
					perché \math{Z} ha lunghezza \math{k} mentre \math{Z'}
					ha lunghezza \math{k + 1}. Questo é in contraddizione 
					con l'ipotesi di partenza secondo cui \math{Z} é
					effettivamente una LCS, pertanto deve aversi \math{x_{m}
					= y_{n} = z_{k}}.

					Dato che per ipotesi \math{x_{m} = y_{n}}, il
					prefisso \math{Z_{k - 1}} é una sottosequenza
					comune di \math{X_{m - 1}} e \math{Y_{n - 1}}
					avente lunghezza \math{k - 1}. Si vuole dimostrare
					che \math{Z_{k - 1}} é una LCS di \math{X_{m - 1}} e
					\math{Y_{n - 1}}. Si supponga per assurdo che questo
					non sia vero, e che esista quindi una sequenza \math{W}
					che é LCS di \math{X_{m - 1}} e \math{Y_{n - 1}} avente
					lunghezza maggiore di \math{k - 1}. Allora, accodando 
					\math{x_{m} = y_{n}} a \math{W} si ottiene la sequenza
					\math{W'}, che é sottosequenza comune di \math{X} e di
					\math{Y} avente lunghezza maggiore di \math{k}. Questo
					é peró in contraddizione con il fatto che \math{Z} sia
					una LCS per \math{X} e \math{Y}, dato che questa é lunga
					\math{k}. Occorre allora assumere che \math{Z_{k - 1}} é
					una LCS di \math{X_{m - 1}} e \math{Y_{n - 1}}.
				\end{item}
				\begin{item}
					Si supponga per assurdo che, se \math{z_{k} \ne x_{m}},
					allora \math{Z} non sia una LCS di \math{X_{m - 1}} e
					\math{Y}. Deve allora esistere una sequenza \math{W}
					di lunghezza maggiore di \math{k} che é LCS di
					\math{X_{m - 1}} e \math{Y}. Ma allora \math{W} é anche
					LCS per \math{X} e \math{Y}, contraddicendo l'ipotesi che
					lo sia \math{Z}. Occorre allora assumere che \math{Z} sia
					una LCS di \math{X_{m - 1}} e \math{Y}.
				\end{item}
				\begin{item}
					La dimostrazione é simmetrica a quella del punto
					precedente.
				\end{item}
			\end{enumerate}
		\end{theorem}

	\subsection{Programmazione dinamica: equazione di ricorrenza}

		Date due sequenze \math{X} e \math{Y} rispettivamente di
		lunghezza \math{m} e \math{n}, siano \math{X_{i} = X[1 : i]}
		e \math{Y_{j} = Y[1 : j]} i prefissi di lunghezza \math{i} e
		\math{j} delle rispettive sequenze. La soluzione \math{S_{i, j}}
		per l'\math{i, j}-esima istanza del problema corrisponde a trovare
		la soluzione ottimale per il problema LCS rispetto alle sottosequenze
		\math{X_{i}} e \math{Y_{j}}. La soluzione per le intere sequenze
		\math{X} e \math{Y} é la soluzione per l'istanza \math{X_{m}, Y_{n}}.
		La lunghezza della sottosequenza comune piú lunga soluzione per la
		\math{i, j}-esima istanza del problema viene indicata con
		\math{\mi{Opt}(i, j)}.

		Il caso base é semplice da determinare; é evidente come due sequenze
		vuote non abbiano alcun elemento in comune. Inoltre, una qualsiasi
		sequenza non vuota non ha alcun carattere in comune con la sequenza
		vuota.

		\begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				S_{i, j} = \langle \rangle \thickspace \mi{se} \thickspace i = 0 \vee j = 0 
			\end{math}
		\end{parbox}
		\begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				\mi{Opt}(i, j) = 0 \thickspace \mi{se} \thickspace i = 0 \vee j = 0 
			\end{math}
		\end{parbox}
		\par

		Per quanto riguarda il passo ricorsivo, si assuma di avere
		a disposizione tutte le soluzioni nella forma \math{S_{a,
		b}}, con \math{1 \leq a < i} e \math{1 \leq b < j}, e di
		voler calcolare \math{S_{i, j}}. Possono verificarsi solamente
		due situazioni, mutualmente esclusive: l'\math{i}-esimo carattere
        di \math{X_{i}} e uguale al \math{j}-esimo carattere di \math{Y_{j}}
        oppure l'\math{i}-esimo carattere di \math{X_{i}} é diverso dal
        \math{j}-esimo carattere di \math{Y_{j}}.

		Nel primo caso, per definizione, tale carattere deve essere parte
		della sottosequenza comune piu lunga. Pertanto, in questo caso, la
		soluzione ottimale per la \math{i, j}-esima istanza si ottiene
		semplicemente accodando l'ultimo carattere alla soluzione ottimale
		dell'istanza precedente, ovvero \math{S_{i - 1, j - 1}}.

		Nel secondo caso, la soluzione ottimale per la \math{i, j}-esima
		istanza deve necessariamente essere di lunghezza maggiore o uguale
		(ma non minore) alla lunghezza di tutte le soluzioni per istanze
		precedenti, e non puó, per definizione, contenere l'\math{i}-esimo
		elemento di \math{X} (o il \math{j}-esimo elemento di \math{Y}).
		In particolare, le uniche soluzioni candidate ad essere le soluzioni
		per la \math{i, j}-esima istanza sono la \math{i - 1, j}-esima e la
		\math{i, j - 1}-esima, ovvero \math{S_{i - 1, j}} e \math{S_{i, j -
		1}}, perché a loro volta comprendono tutte le istanze a loro
		precedenti. Dato che sono entrambe valide, il criterio di scelta
		consiste nello scegliere fra le due la soluzione con lunghezza
		maggiore.

		\begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				S_{i, j} =
				\{\table[columnalign = left left]{
					S_{i - 1, j - 1} \cup \{x_{i}\} & \mi{se} \thickspace X[i] = Y[j] \\
					S_{i - 1, j} & \mi{se} \thickspace X[i] \ne Y[j] \wedge
					\mi{Opt}(i - 1, j) > \mi{Opt}(i, j - 1) \\
					S_{i, j - 1} & \mi{se} \thickspace X[i] \ne Y[j] \wedge
					\mi{Opt}(i, j - 1) > \mi{Opt}(i - 1, j) \\
				}
			\end{math}
		\end{parbox}
		\begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				\mi{Opt} {(i, j)} =
				\{\table[columnalign = left left]{
					\mi{Opt}(i - 1, j - 1) + 1 &
					\mi{se} \thickspace X[i] = Y[j] \\
					\mi{max}\{\mi{Opt}(i - 1, j), \mi{Opt}(i, j - 1)\} &
					\mi{se} \thickspace X[i] \ne Y[j] \\
				}
			\end{math}
		\end{parbox}

	\subsection{Programmazione dinamica: implementazione bottom-up}

		L'algoritmo bottom-up viene costruito a partire dall'equazione di
		ricorrenza sfruttando una tabella \math{c}. In ciascuna cella
		\math{c[i, j]} viene riportato il valore della soluzione ottimale
		per la \math{i, j}-esima istanza del problema, che viene utilizzata
		per calcolare i valori ottimali per le istanze successive. L'algoritmo
		riceve in input le due sequenze \math{X} e \math{Y} e restituisce in
		output la tabella \math{c}.

		Si noti come le celle che hanno 0 come uno dei due indici possano
		venire riempite immediatamente con 0, come da caso base dell'equazione
		di ricorrenza.

		\begin{verbatim}
			procedure LCS(X, Y)
			    for i = 0 to m do
			        c[i, 0] = 0
			    for j = 0 to n do
			        c[0, j] = 0

			    \bigskip
			    for i = 1 to m do
			        for j = 1 to n do
			            if X[i] == Y[j] then
			                c[i, j] = 1 + c[i - 1, j - 1]
			            else
			                c[i, j] = max(c[i, j - 1], c[i - 1, j])

			    \bigskip
			    return c
		\end{verbatim}

		É facile notare come il tempo di esecuzione dell'algoritmo
		sia \math{O(nm)}, dove \math{m} e \math{n} sono le lunghezze
		di rispettivamente la stringa \math{X} e la stringa \math{Y}.
		I primi due cicli eseguono una operazione immediata rispettivamente
		per \math{m} e per \math{n} volte, dopodiché si presenta un doppio
		ciclo innestato: il ciclo esterno esegue il ciclo interno \math{m}
		volte, mentre il ciclo interno esegue \math{n} volte un blocco di
		decisione il cui tempo di esecuzione puó considerarsi immediato.
		Si ha allora che, asintoticamente, \math{O(m) + O(n) + O(mn) = O(mn)}.

		\begin{example}
			\begin[cols = 5%fw 5%fw 5%fw 5%fw 5%fw
						  5%fw 5%fw 5%fw 5%fw 5%fw]{ptable}
				\begin{row}
					\cell{} \cell{\math{\epsilon}} \cell{S} \cell{A}
					\cell{T} \cell{U} \cell{R} \cell{D} \cell{A} \cell{Y}
				\end{row}
				\begin{row}
					\cell{\math{\epsilon}} \cell{0} \cell{0} \cell{0} 
					\cell{0} \cell{0} \cell{0} \cell{0} \cell{0} \cell{0}
				\end{row}
				\begin{row}
					\cell{S} \cell{0} \cell{1} \cell{1} \cell{1} 
					\cell{1} \cell{1} \cell{1} \cell{1} \cell{1}
				\end{row}
				\begin{row}
					\cell{U} \cell{0} \cell{1} \cell{1} \cell{1}
					\cell{2} \cell{2} \cell{2} \cell{2} \cell{2}
				\end{row}
				\begin{row}
					\cell{N} \cell{0} \cell{1} \cell{1} \cell{1}
					\cell{2} \cell{2} \cell{2} \cell{2} \cell{2}
				\end{row}
				\begin{row}
					\cell{D} \cell{0} \cell{1} \cell{1} \cell{1}
					\cell{2} \cell{2} \cell{3} \cell{3} \cell{3}
				\end{row}
				\begin{row}
					\cell{A} \cell{0} \cell{1} \cell{2} \cell{2}
					\cell{2} \cell{2} \cell{3} \cell{4} \cell{4}
				\end{row}
				\begin{row}
					\cell{Y} \cell{0} \cell{1} \cell{2} \cell{2}
					\cell{2} \cell{2} \cell{3} \cell{4} \cell{5}
				\end{row}
			\end{ptable}
		\end{example}

	\subsection{Programmazione dinamica: ricostruzione di una soluzione}

		Una volta calcolata la lunghezza della LCS, é possibile
		individuarne una ripercorrendo la tabella a ritroso. In
		particolare, questo viene fatto estendendo l'algoritmo
		per il calcolo della lunghezza introducendo una nuova
		tabella \math{b} di puntatori. In particolare, nella
		cella \math{(i, j)} della tabella \math{b} viene inserito:

		\begin{itemize}
			\begin{item}
				Un puntatore \math{\nwarrow} quando l'\math{i}-esimo
				elemento della prima sequenza é uguale al \math{j}-esimo
				elemento della seconda;
			\end{item}
			\begin{item}
				un puntatore \math{\uparrow} quando l'\math{i}-esimo elemento
				della prima sequenza é distinto dal \math{j}-esimo elemento
				della seconda ed il valore nella cella \math{[i - 1, j]} della
				tabella principale é maggiore di quello nella cella \math{[i,
				j - 1]};
			\end{item}
			\begin{item}
				Un puntatore \math{\leftarrow} altrimenti.
			\end{item}
		\end{itemize}

		\bigskip

		Alla vecchia procedura opportunamente modificata ne viene aggiunta
		un'altra, \tt{PRINT-LCS}. Questa ha in input la tabella \math{b},
		la stringa \math{X} (o la stringa \math{Y}, é indifferente) e due
		indici di posizione \math{i} e \math{j}, mentre in output ha una
		delle possibili LCS per la stringa in input. La prima chiamata alla
		procedura ha \math{\abs{X}} come valore per \math{i} e \math{\abs{Y}}
		come valore per \math{j}, in modo da ottenere la soluzione per
		l'istanza \math{\abs{X}, \abs{Y}}.

		La procedura ripercorre la tabella \math{b} dalla cella \math{(i, j)}
		verso la cella \math{(0, 0)}; ogni volta che si incontra il puntatore
		\math{\nwarrow}, il valore delle due sequenze in corrispondenza della
		cella di partenza é un elemento della soluzione.

		Si noti come possano esistere piú percorsi all'interno della
		tabella. Il numero di percorsi dipende dal numero \math{k} di
		biforcazioni. Ogni biforcazione indica una possibile soluzione
		al problema LCS, eventualmente ridonanti. Il numero di percorsi
		non puó essere superiore a \math{2^{k}}, ed il numero di possibili
		soluzioni distinte é non superiore al numero di possibili percorsi.

		\begin[width = 50%fw]{parbox}
			\begin{verbatim}
				procedure LCS(X, Y)
				    for i = 0 to m do
				        c[i, 0] = 0
				    for j = 0 to n do
				        c[0, j] = 0

				    \bigskip
				    for i = 1 to m do
				        for j = 1 to n do
				            if X[i] == Y[j] then
				                c[i, j] = 1 + c[i - 1, j - 1]
				                b[i, j] = "\unichar{U+2196}"
				            else if c[i - 1, j] > c[i, j - 1]
				                c[i, j] = c[i - 1, j]
				                b[i, j] = "\unichar{U+2191}"
				            else
				                c[i, j] = c[i, j - 1]
				                b[i, j] = "\unichar{U+2190}"

				    \bigskip
				    return c, b
			\end{verbatim}
		\end{parbox}
		\begin[width = 50%fw]{parbox}
			\begin{verbatim}
				procedure PRINT-LCS(b, X, i, j)
				    if i == 0 or j == 0
				        return

				    \bigskip
				    if b[i, j] == "\unichar{U+2196}"
				        PRINT-LCS(b, X, i - 1, j - 1)
				        print X[i]
				    else if b[i, j] == "\unichar{U+2191}"
				        PRINT-LCS(b, X, i - 1, j)
				    else
				        PRINT-LCS(b, X, i, j - 1)							
			\end{verbatim}
		\end{parbox}
		\par

		Sebbene la procedura sia ricorsiva, il suo tempo di esecuzione é 
		comunque proporzionale alle dimensioni della tabella \math{b},
		perché la ricorsione é una tail-recursion. 

\end{sile}
