\begin{sile}

    \subsection{Definizione del problema}

        Una stringa \math{X = \{x_{1}, x_{2}, \unicodeellipsis, x_{n}\}}
        è detta \strong{palindroma} se è uguale alla stringa \math{X' =
        \{x_{n}, \unicodeellipsis, x_{2}, x_{1}\}}, che è composta dagli
        stessi caratteri di \math{X} ma in ordine inverso. Il \strong{problema
        della chiusura palindroma} chiede di trovare, per una generica stringa
        \math{X}, il numero minimo di caratteri da inserirvi per renderla
        palindroma.

        Il problema puó essere risolto mediante programmazione dinamica.
        Data una stringa \math{X} di lunghezza \math{n}, sia \math{X_{i, j}
        = X[i : j]} la sottostringa di \math{X} che ha il primo carattere in
        posizione \math{i} e l'ultimo carattere in posizione \math{j}. La
        soluzione \math{S_{i, j}} per l'\math{i, j}-esima istanza del problema
        corrisponde a trovare la soluzione ottimale per il problema della
        chiusura palindroma rispetto alla sottostringa \math{X_{i, j}}. La
        soluzione per l'intera stringa \math{X} è la soluzione per l'istanza
        \math{X_{1, n}}.

    \subsection{Programmazione dinamica: equazione di ricorrenza}

        Il caso base è immediato. Se la sottostringa \math{X_{i, j}} è
        la stringa vuota, ovvero se \math{i > j}, non vi è bisogno di
        aggiungere alcun carattere a \math{X_{i, j}} per renderla
        palindroma, perché la stringa vuota è per definizione palindroma.
        Similmente, se la sottostringa è formata da un solo carattere,
        ovvero se \math{i = j}, non vi è bisogno di aggiungere alcun
        carattere a \math{X_{i, j}} per renderla palindroma, perché una
        stringa di lunghezza unitaria è per definizione palindroma.

        \begin[mode = display]{math}
            S_{i, j} = 0 \thickspace \mi{se} \thickspace i \geq j
        \end{math}

        Per quanto riguarda il passo ricorsivo, si assuma di avere
		a disposizione tutte le soluzioni nella forma \math{S_{a, b}},
		con \math{1 \leq a < i} e \math{1 \leq b < j}, e di voler
		calcolare \math{S_{i, j}}. Possono verificarsi solamente due
		situazioni: il primo ed ultimo carattere di \math{X_{i, j}}
		sono uguali oppure sono diversi.

        Se sono uguali, allora tale stringa è palindroma solo se lo
        è anche la sottostringa ottenuta eliminandovi tali caratteri,
        ovvero se lo è anche \math{X_{i + 1, j - 1}}. In altri termini,
        non é necessario aggiungere alcun carattere a \math{X_{i, j}}
        per renderla palindroma se lo é giá \math{X_{i + 1, j - 1}} e
        se \math{x_{i} = x_{j}}. Per questo motivo, in questo caso, il
        numero minimo di caratteri per rendere palindroma \math{X_{i,
        j}} é lo stesso di \math{X_{i + 1, j - 1}}.

        Se invece sono distinti, allora tale stringa sará palindroma
        solo se lo è anche la sottostringa ottenuta eliminandovi il
        primo oppure l'ultimo carattere. In entrambi i casi, la soluzione
        ottimale non potrá che aumentare di uno, perché se i due caratteri
        sono distinti allora é necessario aggiungere almeno un carattere
        per rendere palindroma la stringa. Fra le due sottostringhe in
        esame, é da scegliersi quella che minimizza il numero di aggiunte
        necessarie.

        \begin[mode = display]{math}
            S_{i, j} =
            \{\table[columnalign = left left]{
                S_{i + 1, j - 1} &
                \mi{se} \thickspace x_{i} = x_{j} \\
                1 + \mi{min}\{S_{i + 1, j}, S_{i, j - 1}\} &
                \mi{se} \thickspace x_{i} \ne x_{j} \\
            }
        \end{math}

    \subsection{Programmazione dinamica: implementazione bottom-up}

        L'algoritmo bottom-up viene costruito a partire dall'equazione
        di ricorrenza sfruttando una tabella \math{c}. In ciascuna cella
		\math{c[i, j]} viene riportato il valore della soluzione ottimale
		per la \math{i, j}-esima istanza del problema, che viene utilizzata
		per calcolare i valori ottimali per le istanze successive.
		L'algoritmo riceve in input la stringa \math{X} e restituisce
		in output \math{c[1, \abs{X}]}, la soluzione del problema.

		\begin{verbatim}
			procedure PAL-CLOSURE(X)
			    for i \unichar{U+2190} 0 to |X| do
			        for j \unichar{U+2190} 0 to |X| do
			            c[i, j] \unichar{U+2190} 0

			    \bigskip
			    for i \unichar{U+2190} |X| down to 1 do
			        for j \unichar{U+2190} 1 to |X| do
			            if (i < j) then
			                if (X[i] = X[j]) then
			                    c[i, j] \unichar{U+2190} c[i + 1, j - 1]
			                else
			                    c[i, j] \unichar{U+2190} 1 + min(c[i + 1, j], c[i, j - 1])

			    \bigskip
			    return c[1, |X|]
		\end{verbatim}

\end{sile}
