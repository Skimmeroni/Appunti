\begin{sile}

    \subsection{Definizione del problema}

        Sia dato un insieme \math{X} costituito da "oggetti". A ciascun
		oggetto \math{i \in X} è associato un valore \math{v_{i}} ed un
		ingombro \math{w_{i}}. Questi oggetti vanno riposti all'interno
		di uno zaino avente capacitá massima \math{C}.

        La nozioni di valore e di ingombro vengono poi estese dai singoli
		elementi di \math{X} a sottoinsiemi \math{A} di \math{X}. Il valore
		di un insieme \math{A \subseteq X} è dato dalla somma dei valori
		dei singoli oggetti di cui è costituito; allo stesso modo, l'ingombro
		di un insieme \math{A \subseteq X} è dato dalla somma dei pesi dei
        singoli oggetti di cui è costituito. Naturalmente, si assume che un
        insieme di oggetti nullo ha associato sia peso sia valore pari a zero.

        \begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				V{(A)} = 
				\{\table[columnalign = left left]{
					\sum_{i \in A} v_{i} \in A & \mi{se} \thickspace A \ne \varnothing \\
					0 & \mi{se} \thickspace A = \varnothing \\
				}
			\end{math}
		\end{parbox}
		\begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				W{(A)} = 
				\{\table[columnalign = left left]{
					\sum_{i \in A} w_{i} \in A & \mi{se} \thickspace A \ne \varnothing \\
					0 & \mi{se} \thickspace A = \varnothing \\
				}
			\end{math}
		\end{parbox}
		\par

        Il problema \strong{Knapsack 0/1} prevede di individuare
        il sottoinsieme di oggetti avente massimo valore complessivo
        e peso complessivo inferiore alla capacità dello zaino. Il
        numero totale di oggetti del sottoinsieme ed il suo peso totale
        (fintanto che questo è inferiore alla capacità dello zaino) non
        sono rilevanti ai fini della soluzione.

        \begin{example}
            \begin[width = 35%fw]{parbox}
                \begin[cols = 25%fw 25%fw 25%fw]{ptable}
                    \begin{row}
                        \cell{\strong{A}}
                        \cell{\strong{V}}
                        \cell{\strong{W}}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{1}}}
                        \cell{1}
                        \cell{7}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{2}}}
                        \cell{1}
                        \cell{4}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{3}}}
                        \cell{1}
                        \cell{5}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{4}}}
                        \cell{1}
                        \cell{1}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{5}}}
                        \cell{1}
                        \cell{1}
                    \end{row}
                \end{ptable}
            \end{parbox}
            \begin[width = 65%fw]{parbox}
                Si consideri uno zaino con capacità totale pari a 10.
                Il sottoinsieme \math{\{A, B, C\}} ha ingombro totale
                pari a \math{7 + 4 + 5 = 16}, pertanto non può essere
                una soluzione al problema. Il sottoinsieme \math{\{A, E\}}
                ha ingombro totale pari a \math{7 + 1 = 8}, pertanto è una
                possibile soluzione, per quanto non sia quella ottimale.
                Questa è infatti data dal sottoinsieme \math{\{B, C, D\}},
                che ha ingombro totale pari a \math{4 + 5 + 1 = 10} e valore
                complessivo pari a \math{1 + 1 + 1 = 3}.
            \end{parbox}
        \end{example}

    \subsection{Programmazione dinamica: sottostruttura ottima}

        \begin{theorem}
            Si consideri l'insieme \math{X_{n}} composto da \math{n} oggetti.
            Data una soluzione ottimale \math{S} per tale insieme, vi sono
            due possibilità:

            \begin{itemize}
                \begin{item}
                    \math{n} è parte della soluzione, ovvero \math{n \in S}
                    e \math{w_{n} < C}. Allora l'insieme \math{S' = S
                    \mathslash \{n\}} è la soluzione ottimale per l'istanza
                    data dall'insieme di oggetti \math{X \mathslash \{n\} =
                    X_{n - 1}} e da uno zaino di capacità \math{C' = C - w_{n}}.
                \end{item}
                \begin{item}
                    \math{n} non è parte della soluzione, ovvero \math{n \notin
                    S}. Allora l'insieme \math{S} è la soluzione ottimale per
                    l'istanza data dall'insieme di oggetti \math{X \mathslash
                    \{n\} = X_{n - 1}} e da uno zaino di capacità \math{C}.
                \end{item}
            \end{itemize}

            \bigskip

            \strong{Dimostrazione}. La dimostrazione procede per casi:

            \begin{itemize}
                \begin{item}
                    Innanzitutto, \math{S'} è compatibile con la capacità
                    \math{C - w_{n}}. Infatti, avendosi \math{W(S') = W(S)
                    - w_{n}}:

                    \begin[mode = display]{math}
                        W(S) \leq C
                        \thickspace \Rightarrow \thickspace
                        W(S) - w_{n} \leq C - w_{n}
                        \thickspace \Rightarrow \thickspace
                        W(S') \leq C - w_{n}
                    \end{math}

                    Inoltre, \math{S'} è l'insieme compatibile avente valore
                    totale massimo. Si assuma infatti per assurdo che esista
                    un insieme \math{S''} tale che \math{V(S'') > V(S')} e
                    \math{W(S'') \leq C - w_{n}}. Allora \math{S'' \cup \{n\}}
                    è la soluzione ottimale per l'istanza \math{X} e \math{C}
                    di valore totale maggiore di \math{V(S)}, e questo fatto è
                    in contrasto con l'ipotesi che la soluzione ottimale per
                    \math{X} sia \math{S}.
                \end{item}
                \begin{item}
                    Si assuma per assurdo che esista \math{S'}, una soluzione
                    ottimale per l'istanza data dall'insieme \math{X_{n - 1}}
                    e capacità \math{C} tale per cui \math{V(S') > V(S)}. Ma 
                    allora \math{S'} è una soluzione ottimale per l'istanza 
                    data dall'insieme \math{X} e dalla capacità \math{C}, che
                    è in contrasto con l'ipotesi che la soluzione ottimale per
                    \math{X} sia \math{S}.
                \end{item}
            \end{itemize}
        \end{theorem}

    \subsection{Programmazione dinamica: equazione di ricorrenza}

        Dato un insieme di oggetti \math{X} avente cardinalità \math{n},
        ordinati per peso, sia \math{X_{i}} l'insieme costituito dai
        primi \math{i} oggetti di \math{X} secondo tale ordinamento.
        Sia poi \math{C} un valore intero positivo, che rappresenta
        la capacità dello zaino. La soluzione \math{S_{i, c}} per la
        \math{i}-esima istanza del problema corrisponde a trovare la
        soluzione ottimale per il problema Knapsack 0/1 rispetto al
        sottoinsieme \math{X_{i}} e alla capacità massima \math{c}.
        La soluzione per l'intero insieme \math{X} è la soluzione per
        l'istanza \math{X_{n}}. Il valore totale della soluzione ottimale
        per la \math{i}-esima istanza del problema con capacità \math{c}
        viene indicata con \math{\mi{Opt}(i, c)}.

        Il caso base è semplice da determinare; se non vi è alcun oggetto
        da dover mettere nello zaino o se lo zaino non può contenere alcun
        oggetto, la soluzione ottimale è l'insieme vuoto. 

		\begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				S_{i, c} = \varnothing \thickspace \mi{se} \thickspace i = 0 \vee c = 0
			\end{math}
		\end{parbox}
		\begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				\mi{Opt}(i, c) = 0 \thickspace \mi{se} \thickspace i = 0 \vee c = 0
			\end{math}
		\end{parbox}
		\par

        Per quanto riguarda il passo ricorsivo, si assuma di avere a
        disposizione tutte le soluzioni nella forma \math{S_{a, b}}, 
        con \math{1 \leq a < i} e \math{1 \leq b < c}, e di voler
        calcolare \math{S_{i, c}}.  Possono verificarsi solamente due
        situazioni, mutualmente esclusive: l'\math{i}-esimo oggetto fa
        parte della soluzione ottimale \math{S_{i, c}} oppure non ne fa
        parte.

        Se \math{i} non fa parte di \math{S_{i, c}}, allora la soluzione
        per la \math{i, c}-esima istanza è la medesima per l'istanza \math{i
        - 1, c}-esima, perché l'oggetto non viene inserito nello zaino. Se
        invece \math{i} fa parte di \math{S_{i, c}}, ovvero se l'oggetto
        viene inserito nello zaino, allora occorre cercare la miglior
        soluzione precedente a \math{S_{i, c}} che sia compatibile con la
        presenza di \math{i}. Questa non puó che essere \math{S_{i - 1,
        c  - w_{i}}}, ovvero la soluzione per l'oggetto precedente ma la
        cui capacitá é diminuita del peso dell'oggetto corrente.

        \begin[width = 50%fw]{parbox}
            \begin[mode = display]{math}
                S_{i, c} =
                \{\table[columnalign = left left]{
                    S_{i - 1, c} & \mi{se} \thickspace i \notin S_{i, c} \\
                    S_{i - 1, c  - w_{i}} \cup \{i\} & \mi{se} \thickspace i \in S_{i, c} \\
                }
            \end{math}
        \end{parbox}
        \begin[width = 50%fw]{parbox}
            \begin[mode = display]{math}
                \mi{Opt} {(i, c)} =
                \{\table[columnalign = left left]{
                    \mi{Opt}(i - 1, c) & \mi{se} \thickspace i \notin S_{i, c} \\
                    \mi{Opt}(i - 1, c - w_{i}) + v_{i} & \mi{se} \thickspace i \in S_{i, c} \\
                }
            \end{math}
        \end{parbox}
        \par

        Naturalmente, non è possibile sapere a priori se l'\math{i}-esimo
        elemento di \math{X} faccia oppure non faccia parte di \math{S_{i,
        c}}, a meno che il peso dell'\math{i}-esimo oggetto sia maggiore
        della capacità \math{c}. In quel caso, si ha la certezza che \math{i
        \notin S_{i, c}}. Se invece il peso dell'oggetto è inferiore o uguale
        a \math{c}, allora \math{i} può fare parte di \math{S_{i, c}}; la
        scelta fra l'includere e il non includere \math{i} in \math{S_{i,
        c}} è determinata da quale delle due restituisce una soluzione avente
        valore maggiore.

        \begin[width = 55%fw]{parbox}
            \begin[mode = display]{math}
                S_{i, c} = \{\table[columnalign = left left]{
                    S_{i - 1, c} & \mi{se} \thickspace w_{i} > c \\
                    S_{i - 1, c - w_{i}} \cup \{i\} & \mi{se} \thickspace w_{i} \leq c \wedge \mi{Opt}(i - 1, c - w_{i}) + v_{i} \geq \mi{Opt}(i - 1, c) \\
                    S_{i - 1, c} & \mi{se} \thickspace w_{i} \leq c \wedge \mi{Opt}(i - 1, c - w_{i}) + v_{i} < \mi{Opt}(i - 1, c) \\
                }
            \end{math}
        \end{parbox}
        \begin[width = 45%fw]{parbox}
            \begin[mode = display]{math}
                \mi{Opt} {(i, c)} = \{\table[columnalign = left left]{
                    \mi{Opt}(i - 1, c) & \mi{se} \thickspace w_{i} > c \\
                    \mi{max} \{\mi{Opt}(i - 1, c - w_{i}) + v_{i},
                    \mi{Opt}(i - 1, c)\} & \mi{se} \thickspace w_{i} \leq c \\
                }
            \end{math}
        \end{parbox}

    \subsection{Programmazione dinamica: implementazione bottom-up}

        L'algoritmo bottom-up viene costruito a partire dall'equazione di
        ricorrenza sfruttando una tabella \math{d} ed una tabella \math{p}.
        In ciascuna cella \math{p[i, j]} viene riportato il valore della
        soluzione ottimale per la \math{i, j}-esima istanza del problema,
        mentre in ciascuna cella \math{d[i, j]} viene riportata la soluzione
        stessa. I valori di \math{p[i, j]} vengono utilizzati per calcolare
        i valori ottimali per le istanze successive. L'algoritmo riceve in
        input l'insieme \math{V} dei valori degli oggetti, l'insieme \math{W}
        dei pesi degli oggetti e la capacità totale \math{C} e restituisce in
        output la coppia \math{d[\abs{V}, C], p[\abs{V}, C]}, la soluzione del
        problema.

        \begin{verbatim}
            procedure KNAPSACK(V, W, C)
                for i \unichar{U+2190} 0 to |V| do
                    d[i, 0] \unichar{U+2190} \unichar{U+2205}
                    p[i, 0] \unichar{U+2190} 0
                for c \unichar{U+2190} 0 to C do
                    d[0, c] \unichar{U+2190} \unichar{U+2205}
                    p[0, c] \unichar{U+2190} 0

                \bigskip
                for i \unichar{U+2190} 1 to |V| do
                    for c \unichar{U+2190} 1 to C do
                        if (W[i] > c) then
                            d[i, c] \unichar{U+2190} d[i - 1, c]
                            p[i, c] \unichar{U+2190} p[i - 1, c]
                        else
                            if (p[i - 1, c - W[i]] + V[i] \unichar{U+2265} p[i - 1, c]) then
                                d[i, c] \unichar{U+2190} d[i - 1, c - W[i]] \unichar{U+222A} \{i\}
                                p[i, c] \unichar{U+2190} d[i - 1, c - W[i]] + V[i]
                            else
                                d[i, c] \unichar{U+2190} d[i - 1, c]
                                p[i, c] \unichar{U+2190} p[i - 1, c]

                \bigskip
                return d[|V|, C], p[|V|, C]
        \end{verbatim}

        Il tempo di esecuzione dell'algoritmo è \math{O(nC)}, dove \math{n}
        è il numero di oggetti nell'insieme \math{X}. Infatti, l'algoritmo
        è costituito da una coppia di cicli for innestati, dove il ciclo
        più esterno esegue il ciclo interno esattamente \math{n} volte,
        mentre il ciclo interno esegue una serie di operazioni aventi tempo
        di esecuzione unitario.

    \subsection{Programmazione dinamica: ricostruzione di una soluzione}

        É possibile ottimizzare la procedura calcolando prima il valore totale
        della soluzione ottimale e poi individuarne una ripercorrendo la tabella
        a ritroso. In particolare, questo viene fatto introducendo una nuova
        procedura, \tt{PRINT-KNAPSACK}, che ha in input la tabella \math{D},
        l'insieme dei pesi \math{W}, una capacità \math{c} ed un indice \math{i},
		mentre in output ha uno dei possibili insiemi di oggetti aventi massimo
		valore totale. La prima chiamata alla procedura ha \math{\abs{X}} come
		valore per \math{i} e \math{C} come valore per \math{c} in modo da ottenere
		la soluzione per l'istanza \math{\abs{X}, c}.

        La procedura ripercorre il vettore \math{c} dalla cella \math{i} verso la
        cella 0. Ogni volta che la capacità é maggiore del peso dell'\math{i}-esimo
        oggetto e la \math{i, c}-esima cella di \math{D} non ha lo stesso valore
        della \math{i - 1, c}-esima, allora l'\math{i}-esimo oggetto è un elemento
        della soluzione.

        \begin[width = 50%fw]{parbox}
            \begin{verbatim}
            procedure KNAPSACK(V, W, C)
                for i \unichar{U+2190} 0 to |V| do
                    p[i, 0] \unichar{U+2190} 0
                for c \unichar{U+2190} 0 to C do
                    p[0, c] \unichar{U+2190} 0

                \bigskip
                for i \unichar{U+2190} 1 to |V| do
                    for c \unichar{U+2190} 1 to C do
                        if (W[i] > c) then
                            p[i, c] \unichar{U+2190} p[i - 1, c]
                        else
                            if (p[i - 1, c - W[i]] + V[i] \unichar{U+2265} p[i - 1, c]) then
                                p[i, c] \unichar{U+2190} d[i - 1, c - W[i]] + V[i]
                            else
                                p[i, c] \unichar{U+2190} p[i - 1, c]

                \bigskip
                return p[|V|, C]
            \end{verbatim}
        \end{parbox}
        \begin[width = 50%fw]{parbox}
            \begin{verbatim}
            procedure PRINT-KNAPSACK(D, W, i, c)
                if i > 0 and c > 0 then
                    if c \unichar{U+2265} W[i] then
                        if D[i, c] = D[i - 1, c] then
                            PRINT-KNAPSACK(D, W, i - 1, c)
                        else
                            PRINT-KNAPSACK(D, W, i - 1, c - W[i])
                            print i
                else
                    PRINT-KNAPSACK(D, W, i - 1, c)
            \end{verbatim}
        \end{parbox}
        \par

        Sebbene la procedura sia ricorsiva, il suo tempo di esecuzione è 
		comunque proporzionale al numero di oggetti e alla capacità massima,
		perché la ricorsione è una tail-recursion.

		\begin{example}
            \begin[width = 35%fw]{parbox}
                \begin[cols = 25%fw 25%fw 25%fw]{ptable}
                    \begin{row}
                        \cell{\strong{A}}
                        \cell{\strong{V}}
                        \cell{\strong{W}}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{1}}}
                        \cell{1}
                        \cell{7}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{2}}}
                        \cell{1}
                        \cell{4}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{3}}}
                        \cell{1}
                        \cell{5}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{4}}}
                        \cell{1}
                        \cell{1}
                    \end{row}
                    \begin{row}
                        \cell{\math{A_{5}}}
                        \cell{1}
                        \cell{1}
                    \end{row}
                \end{ptable}
            \end{parbox}
            \begin[width = 65%fw]{parbox}
                \begin[cols = 5%fw 5%fw 5%fw 5%fw 5%fw 5%fw 5%fw 5%fw 5%fw 5%fw 5%fw]{ptable}
                    \begin{row}
                        \cell{0} \cell{0} \cell{0} \cell{0} \cell{0} \cell{0}
                        \cell{0} \cell{0} \cell{0} \cell{0} \cell{0} \\
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{0} \cell{0} \cell{0} \cell{0} \cell{0}
                        \cell{1} \cell{1} \cell{1} \cell{1} \cell{1} \\
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{0} \cell{0} \cell{0} \cell{1} \cell{1}
                        \cell{1} \cell{1} \cell{1} \cell{1} \cell{1} \\
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{0} \cell{0} \cell{0} \cell{1} \cell{1}
                        \cell{1} \cell{1} \cell{1} \cell{2} \cell{2} \\
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{1} \cell{1} \cell{1} \cell{1} \cell{2}
                        \cell{2} \cell{2} \cell{2} \cell{2} \cell{3} \\
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{1} \cell{2} \cell{2} \cell{2} \cell{2}
                        \cell{3} \cell{3} \cell{3} \cell{3} \cell{3} \\
                    \end{row}
                \end{ptable}
            \end{parbox}
        \end{example}

\end{sile}
