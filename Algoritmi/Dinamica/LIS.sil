\begin{sile}

    \subsection{Definizione del problema}

        Il problema della \strong{Longest Increasing Subsequence}
        (\strong{LIS}) prevede di trovare la piú lunga sottosequenza
        di una sequenza i cui elementi (nell'ordine in cui si trovano)
        hanno valore strettamente crescente.

        \begin{example}
            Sia data la sequenza \math{X = {\langle 14, 2, 4, 2, 7, 0, 13, 21,
            11 \rangle}}. Una sottosequenza strettamente crescente di \math{X}
            é \math{\langle 2, 7, 11 \rangle}, ma non é la piú lunga; tale
            sottosequenza é infatti \math{\langle 2, 4, 7, 13, 21 \rangle}.
        \end{example}

        Attaccare il problema LIS direttamente tramite programmazione dinamica
        é complesso. Un miglior approccio consiste nel restringere i requisiti
        del problema per considerarne una versione semplificata.

        Una versione piú semplice del problema LIS, chiamato \strong{LIS
        vincolato}, prevede di trovare la piú lunga sottosequenza di una
        sequenza i cui elementi (nell'ordine in cui si trovano) hanno valore
        strettamente crescente e dove l'ultimo elemento di tale sottosequenza
        coincide con l'ultimo elemento della sequenza originaria.

        \begin{example}
            Sia data la sequenza \math{X = \langle 14, 1, 4, 6, 13, 15, 0, 13,
            29, 8 \rangle}. La piú lunga sottosequenza strettamente crescente
            di \math{X} si rivela essere \math{\langle 1, 4, 6, 13, 15, 29
            \rangle}. D'altro canto, la piú lunga sottosequenza strettamente
            crescente di \math{X} vincolata si rivela invece essere
            \math{\langle 1, 4, 6, 8 \rangle}.
        \end{example}

    \subsection{Programmazione dinamica: sottostruttura ottima}

        \begin{theorem}
			\strong{Proprietá della sottostruttura ottima per il problema
			Longest Increasing Subsequence}. Sia \math{X} una sequenza di
			\math{m} numeri interi e sia \math{X_{i}} un suo prefisso di
			lunghezza \math{i}, con \math{1 \leq i \leq m}. Sia \math{Z^{i}}
			una LIS di \math{X_{i}}, che termina con \math{x_{i}}. Sia
			infine \math{W_{i}} l'insieme di tutte le possibili sottosequenze
			crescenti (non necessariamente le piú lunghe) di \math{X_{j}} che
			finiscono con \math{x_{j}} e a cui é possibile concatenare
			\math{x_{i}} ottenendo ancora una sequenza crescente, ovvero:

            \smallskip
            \begin{center}
                \begin{math}
                    W_{i} = \bigcup_{1 \leq j < i; \thickspace x_{j} < x_{i}}
                \end{math}
                \{\math{W} sottosequenza crescente di \math{X_{j}}
                che termina con \math{x_{j}}\}
            \end{center}
            \bigskip

            Allora la LIS \math{Z^{i}} é data dalla concatenazione fra
            l'elemento di \math{W_{i}} avente la maggior cardinalitá
            con il carattere \math{x_{i}}, ovvero \math{Z^{i} = Z* |
            x_{i}} con \math{Z* \in W_{i}} e \math{\abs{Z*} =
            \mi{max}_{W \in W_{i}} \{\abs{W}\}}.

            \bigskip
            \strong{Dimostrazione}. Si supponga per assurdo che \math{Z^{i}
            = Z* | x_{i}} non sia la soluzione ottimale per l'\math{i}-esima
            istanza del problema. Questa deve allora essere \math{Z^{i} = Z'
            | x_{i}}, dove \math{Z'} é una sottosequenza crescente avente
            cardinalitá maggiore di \math{Z*}.

            Sia \math{z'} l'elemento in coda a \math{Z'}. Essendo \math{Z^{i}}
            costruito accodando \math{x_{i}} a \math{Z'} ottenendo ancora una
            sequenza crescente, deve aversi \math{z' < x_{i}}. Sia poi
            \math{h < i} il piú grande indice tale che \math{x_{h} = z'}. Di
            conseguenza, per come é stato definito \math{W_{i}}, si ottiene
            che \math{Z' \in W_{i}}. Infatti, \math{Z'} é una sottosequenza
            crescente di \math{X_{h}}, la quale termina con \math{x_{h} <
            x_{i}}. Ció porta peró ad una contraddizione: infatti si ha
            \math{\abs{Z*} = \mi{max}_{W \in W_{i}} \{\abs{W}\}}, ma al
            contempo \math{Z'} é membro di \math{W_{i}} ed é stato
            dimostrato che \math{\abs{Z'} > \abs{Z*}}. Occorre allora
            assumere che \math{Z^{i} = Z* | x_{i}} sia effettivamente la
            soluzione ottimale alla \math{i}-esima istanza del problema.
		\end{theorem}

    \subsection{Programmazione dinamica: equazione di ricorrenza}

        Data una sequenza \math{X} di lunghezza \math{n}, sia \math{X_{i}
        = X[1 : i]} il prefisso di lunghezza \math{i} di tale sequenza.
        La soluzione \math{S_{i}} per l'\math{i}-esima istanza del problema
        corrisponde a trovare la soluzione ottimale per il problema LIS
        vincolato rispetto alla sottosequenza \math{X_{i}}. La soluzione
        per l'intera sequenza \math{X} é la soluzione per l'istanza
        \math{X_{n}}. La lunghezza della sottosequenza strettamente
        crescente piú lunga soluzione per la \math{i}-esima istanza
        del problema viene indicata con \math{\mi{Opt}(i)}.

        Il caso base dell'equazione di ricorrenza é immediato: se
        la sequenza é la sequenza vuota, allora la sottosequenza
        comune piú lunga vincolata é essa stessa la sequenza vuota.

        \begin[width = 50%fw]{parbox}
            \begin[mode = display]{math}
                S_{0} = \epsilon
            \end{math}
        \end{parbox}
        \begin[width = 50%fw]{parbox}
            \begin[mode = display]{math}
                \mi{Opt}(0) = \abs{S_{0}} = 0
            \end{math}
        \end{parbox}
        \par

        Per quanto riguarda il passo ricorsivo, si assuma di avere a
        disposizione tutte le soluzioni \math{S_{i - 1}, S_{i - 2},
        \unicodeellipsis} e di voler calcolare \math{S_{i}}. Dato che
        il problema LIS vincolato richiede di trovare la sottosequenza
        strettamente crescente piú lunga che termini con l'ultimo termine
        della sequenza, deve per forza aversi \math{x_{i} \in S_{i}}.

        Una generica soluzione per la \math{i}-esima istanza del problema
        deve essere costruita accodando \math{x_{i}} ad sottosequenza
        strettamente crescente tale che tutti gli elementi di tale
        sottosequenza vengono prima, in ordine lessicografico, di
        \math{x_{i}}. Questo perché l'aggiunta di \math{x_{i}} in coda
        ad una tale sottosequenza restituisce ancora una sottosequenza
        strettamente crescente. La soluzione ottimale \math{S_{i}} é data
        dalla sottosequenza con queste caratteristiche piú lunga possibile
        a cui viene aggiunto \math{x_{i}} in coda.

        La sottosequenza strettamente crescente piú lunga possibile con
        tutti gli elementi che vengono prima, in ordine lessicografico,
        di \math{x_{i}} sará a sua volta soluzione di una certa istanza
        \math{h} del problema, con \math{h < i}. La soluzione \math{S_{i}}
        é allora il risultato dell'accodare l'elemento \math{x_{i}} alla
        soluzione \math{S_{h}}. Se \math{x_{i}} viene dopo tutti gli altri
        elementi di \math{X_{i}} nell'ordine lessicografico, allora l'elemento
        \math{x_{h}} non esiste. In questo caso, la soluzione per la
        \math{i}-esima istanza del problema é formata dal solo elemento
        \math{x_{i}}.

        \begin[width = 50%fw]{parbox}
            \begin[mode = display]{math}
                S_{i} =
                \{\table[columnalign = left left]{
                    \mi{max}\{S_{h} \thickspace t.c. \thickspace 1 \leq h < i \wedge x_{h} < x_{i}\} \cup \{\langle x_{i} \rangle\} &
                    \mi{se} \thickspace \exists x_{h} \\
                    \langle x_{i} \rangle &
                    \mi{se} \thickspace \nexists x_{h} \\
                }
            \end{math}
        \end{parbox}
        \begin[width = 50%fw]{parbox}
            \begin[mode = display]{math}
                \mi{Opt} {(i)} =
                \{\table[columnalign = left left]{
                    \mi{max}\{\mi{Opt}(h) \thickspace t.c. \thickspace 1 \leq h < i \wedge x_{h} < x_{i}\} + 1 &
                    \mi{se} \thickspace \exists x_{p(i)} \\
                    1 &
                    \mi{se} \thickspace \nexists x_{p(i)} \\
                }
            \end{math}
        \end{parbox}

    \subsection{Programmazione dinamica: implementazione bottom-up}

        L'algoritmo bottom-up viene costruito a partire dall'equazione
        di ricorrenza sfruttando un vettore \math{c}. In ciascuna cella
		\math{c[i]} viene riportato il valore della soluzione ottimale
		per la \math{i}-esima istanza del problema, che viene utilizzata
		per calcolare i valori ottimali per le istanze successive.
		L'algoritmo riceve in input la sequenza \math{X} e restituisce
		in output il vettore \math{c}.

        Si noti come tutte le celle del vettore \math{c} possono essere
        inizializzate subito ad 1, perché questo é il minimo valore che
        in una cella puó essere presente.

        \begin{verbatim}
			procedure LIS(X)
			    for i = 0 to |X| do
			        c[i] = 1

			    \bigskip
			    for i = 0 to |X| do
			        p = 0
			        for j = 0 to i do
			            if (X[j] < X[i]) and (c[j] >= c[p])
			                p = j
			        if (p \unichar{U+2260} 0)
			            c[i] = c[p] + 1

			    \bigskip
			    return c
        \end{verbatim}

        É facile notare come il tempo di esecuzione dell'algoritmo
		sia \math{O(n^{2})}, dove \math{n} é la lunghezza della sequenza
		\math{X}. Il primo ciclo esegue una operazione immediata per
		\math{n} volte, dopodiché si presenta un doppio ciclo innestato:
		il ciclo esterno esegue il ciclo interno \math{n} volte, mentre
		il ciclo interno esegue al piú \math{n} volte (dovendo potenzialmente
		ripercorrere l'intera sequenza a ritroso) un blocco di decisione il
		cui tempo di esecuzione puó considerarsi immediato. Si ha allora che,
		asintoticamente, \math{O(n) + O(n^{2}) = O(n^{2})}.

    \subsection{Programmazione dinamica: ricostruzione della soluzione}

        Una volta calcolata la lunghezza della LIS, é possibile individuarne
        una ripercorrendo il vettore a ritroso. In particolare, questo
        viene fatto estendendo l'algoritmo per il calcolo della lunghezza
        introducendo un vettore \math{h} Nella \math{i}-esima cella di
        \math{h} viene riportato l'indice della cella di \math{c} in cui
        si trova l'elemento predecessore dell'elemento nella \math{i}-esima
        cella di \math{c}. Se l'elemento predecessore non esiste, nella
        \math{i}-esima cella di \math{h} viene riportato 0.

        Alla vecchia procedura opportunamente modificata ne viene aggiunta
        un'altra, \tt{PRINT-LIS}. Questa ha in input il vettore \math{h},
        la sequenza \math{X} ed un indice di posizione \math{i}, mentre in
        output ha una delle possibili LIS per la stringa in input. La prima
        chiamata alla procedura ha \math{\abs{X}} come valore per \math{i},
        in modo da ottenere la soluzione per l'istanza \math{\abs{X}}.

        La procedura ripercorre il vettore \math{h} dalla cella \math{i}
		verso la cella \math{0}; ogni volta che si incontra un elemento
		non nullo di \math{h}, l'elemento della sequenza in tale posizione 
		é un elemento della soluzione.

		\begin[width = 50%fw]{parbox}
			\begin{verbatim}
				procedure LIS(X)
				    for i = 0 to |X| do
				        c[i] = 1
				        h[i] = 0

				    \bigskip
				    for i = 0 to |X| do
				        p = 0
				        for j = 0 to i do
				            if (X[j] < X[i]) and (c[j] >= c[p])
				            p = j
				        if (p \unichar{U+2260} 0)
				            c[i] = c[p] + 1
				            h[i] = p

				    \bigskip
				    return c, h
			\end{verbatim}
		\end{parbox}
		\begin[width = 50%fw]{parbox}
			\begin{verbatim}
				procedure PRINT-LIS(h, X, i)
				    if h[i] \unichar{U+2260} 0 then
				        PRINT-LIS(h, X, h[i])
				    print X[i]
			\end{verbatim}
		\end{parbox}
		\par

        Sebbene la procedura sia ricorsiva, il suo tempo di esecuzione
        é comunque proporzionale alle dimensioni del vettore \math{h},
		perché la ricorsione é una tail-recursion. 

        \begin{example}
            \begin[width = 30%fw]{parbox}
                \begin[mode = display]{math}
                    \langle 14, 2, 4, 2, 7, 0, 13, 21, 20 \rangle
                \end{math}
            \end{parbox}
            \begin[width = 70%fw]{parbox}
                \begin[cols = 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw]{ptable}
                    \begin{row}
                        \cell{\math{X_{0}}} \cell{\math{X_{1}}} \cell{\math{X_{2}}}
                        \cell{\math{X_{3}}} \cell{\math{X_{4}}} \cell{\math{X_{5}}}
                        \cell{\math{X_{6}}} \cell{\math{X_{7}}} \cell{\math{X_{8}}}
                        \cell{\math{X_{9}}}
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{1} \cell{1} \cell{2} \cell{1}
                        \cell{3} \cell{1} \cell{4} \cell{5} \cell{5}
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{0} \cell{0} \cell{2} \cell{0}
                        \cell{3} \cell{0} \cell{5} \cell{7} \cell{7}
                    \end{row}
                \end{ptable}
            \end{parbox}
        \end{example}

    \subsection{Osservazioni}

        Il problema LIS non vincolato puó essere ridotto al problema LIS
        vincolato. Infatti, la soluzione del problema LIS non vincolato non
        é altro che la maggior soluzione parziale del problema LIS vincolato.

\end{sile}
