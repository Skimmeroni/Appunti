\begin{sile}

    \subsection{Definizione del problema}

        Il problema della \strong{Longest Increasing Subsequence}
        (\strong{LIS}) prevede di trovare la più lunga sottosequenza
        di una sequenza i cui elementi (nell'ordine in cui si trovano)
        hanno valore strettamente crescente.

        \begin{example}
            Sia data la sequenza \math{X = {\langle 14, 2, 4, 2, 7, 0, 13, 21,
            11 \rangle}}. Una sottosequenza strettamente crescente di \math{X}
            è \math{\langle 2, 7, 11 \rangle}, ma non è la più lunga; tale
            sottosequenza è infatti \math{\langle 2, 4, 7, 13, 21 \rangle}.
        \end{example}

        Anziché affrontare il problema direttamente, si preferisce prima
		trovare la lunghezza di una possibile LIS della sequenza e poi,
		sulla base di questa informazione, ricostruire la LIS "a ritroso".
		Pertanto, il problema effettivamente in esame sará il problema
		della lunghezza della sottosequenza strettamente crescente piú
		lunga.

		Il problema puó essere risolto mediante programmazione dinamica.
		Data una sequenza \math{X} avente lunghezza \math{n}, sia \math{X_{i}
		= [1 : i]} il suo prefisso di lunghezza \math{i}. La soluzione
		\math{S_{i}} per l'\math{i}-esima istanza del problema corrisponde
		a trovare la soluzione ottimale per il problema LIS rispetto al
		prefisso \math{X_{i}}. La soluzione per l'intera sequenza \math{X}
		è la soluzione per l'istanza \math{X_{n}}.

        Per calcolare la soluzione ottimale della generica istanza \math{X_{i}},
        ovvero \math{S_{i}}, verrá assunto di avere a disposizione tutte le
        soluzioni parziali \math{S_{i - 1}, S_{i - 2}, \unicodeellipsis,
        S_{1}, S_{0}}. Pertanto, per il calcolo della soluzione ottimale
        dell'\math{i}-esima istanza del problema si hanno a disposizione
        l'elemento \math{i}-esimo della sequenza, ovvero \math{x_{i}}, e le
        lunghezze delle sottosequenze strettamente crescenti rispetto alle
        istanze da \math{i - 1} a 0, ma non gli elementi della sequenza che
        comportano tale lunghezza. \math{x_{i}} puó essere come puó non essere
        uno degli elementi della sottosequenza strettamente crescente di
        \math{X_{i}} di lunghezza \math{S_{i}}.

	\subsection{Definizione del problema ausiliario}

        Attaccare il problema LIS direttamente tramite programmazione
        dinamica non è possibile, perché manca un'informazione. Infatti,
        se non é noto quali siano gli elementi che hanno indotto le
        lunghezze ottimali parziali \math{S_{i - 1}, \unicodeellipsis,
        S_{0}} non vi é alcun modo di sapere se l'elemento \math{i}-esimo
        possa essere accodato ad una sottosequenza avente peso \math{S_{j}}
        con \math{j < i} ottenendo di nuovo una sottosequenza strettamente
        crescente di \math{X_{i}}. Questo perché le lunghezze \math{S_{j}}
        potrebbero riferirsi a sottosequenze che contengono elementi che
        vengono dopo di \math{x_{i}} nell'ordine lessicografico.

        L'unico caso in cui si avrebbe la certezza di ottenere ancora
        una sottosequenza strettamente crescente di \math{X_{i}} si ha
        quando é garantito che la sottosequenza soluzione ottimale per
        l'\math{i}-esima istanza contiene anche \math{x_{i}}. É pertanto
        necessario introdurre un problema ausiliario che includa
        l'informazione mancante.

        Una versione più semplice del problema LIS, chiamato \strong{LIS
        vincolato} (\strong{LISV}), prevede di trovare la più lunga
        sottosequenza di una sequenza i cui elementi (nell'ordine in cui
        si trovano) hanno valore strettamente crescente e dove l'ultimo
        elemento di tale sottosequenza coincide con l'ultimo elemento
        della sequenza originaria. Anche in questo caso, si preferisce
        considerare non l'effettiva soluzione di ciascuna istanza del
        problema, bensí il suo peso complessivo, e poi ricostruire "a
        ritroso" la soluzione.

        Data una sequenza \math{X} avente lunghezza \math{n}, sia
        \math{X_{i} = [1 : i]} il suo prefisso di lunghezza \math{i}.
        La soluzione \math{S_{i}} per l'\math{i}-esima istanza del
        problema corrisponde a trovare la soluzione ottimale per il
        problema LIS vincolato rispetto al prefisso \math{X_{i}}. La
        soluzione per l'intera sequenza \math{X} è la soluzione per
        l'istanza \math{X_{n}}.

        Per calcolare la soluzione ottimale della generica istanza \math{X_{i}},
        ovvero \math{S_{i}}, verrá assunto di avere a disposizione tutte le
        soluzioni parziali \math{S_{i - 1}, S_{i - 2}, \unicodeellipsis,
        S_{1}, S_{0}}. Pertanto, per il calcolo della soluzione ottimale
        dell'\math{i}-esima istanza del problema si hanno a disposizione
        l'elemento \math{i}-esimo della sequenza, ovvero \math{x_{i}}, e le
        lunghezze delle sottosequenze strettamente crescenti rispetto alle
        istanze da \math{i - 1} a 0, ma non gli elementi della sequenza che
        comportano tale lunghezza. A differenza del problema originale,
        \math{x_{i}} é per forza uno degli elementi (in particolare, l'ultimo)
        della sottosequenza strettamente crescente di \math{X_{i}} di peso
        \math{S_{i}}.

        \begin{example}
            Sia data la sequenza \math{X = \langle 14, 1, 4, 6, 13, 15, 0, 13,
            29, 8 \rangle}. La più lunga sottosequenza strettamente crescente
            di \math{X} si rivela essere \math{\langle 1, 4, 6, 13, 15, 29
            \rangle}. D'altro canto, la più lunga sottosequenza strettamente
            crescente di \math{X} vincolata si rivela invece essere
            \math{\langle 1, 4, 6, 8 \rangle}.
        \end{example}

    \subsection{Programmazione dinamica: sottostruttura ottima}

        \begin{theorem}
			\strong{Proprietà della sottostruttura ottima per il problema
			Longest Increasing Subsequence (Vincolato)}. Sia \math{X} una
			sequenza di \math{m} numeri interi e sia \math{X_{i}} un suo
			prefisso di lunghezza \math{i}, con \math{1 \leq i \leq m}.
			Sia \math{Z^{i}} una LISV di \math{X_{i}}, che termina con
			\math{x_{i}}. Sia infine \math{W_{i}} l'insieme di tutte le
			possibili sottosequenze crescenti (non necessariamente le
			più lunghe) di \math{X_{j}} che finiscono con \math{x_{j}}
			e a cui è possibile concatenare \math{x_{i}} ottenendo ancora
			una sequenza crescente, ovvero:

            \smallskip
            \begin{center}
                \begin{math}
                    W_{i} = \bigcup_{1 \leq j < i; \thickspace x_{j} < x_{i}}
                \end{math}
                \{\math{W} sottosequenza crescente di \math{X_{j}}
                che termina con \math{x_{j}}\}
            \end{center}
            \bigskip

            Allora la LISV \math{Z^{i}} è data dalla concatenazione fra
            l'elemento di \math{W_{i}} avente la maggior cardinalità
            con il carattere \math{x_{i}}, ovvero \math{Z^{i} = Z* |
            x_{i}} con \math{Z* \in W_{i}} e \math{\abs{Z*} =
            \mi{max}_{W \in W_{i}} \{\abs{W}\}}.

            \bigskip
            \strong{Dimostrazione}. Si supponga per assurdo che \math{Z^{i}
            = Z* | x_{i}} non sia la soluzione ottimale per l'\math{i}-esima
            istanza del problema. Questa deve allora essere \math{Z^{i} = Z'
            | x_{i}}, dove \math{Z'} è una sottosequenza crescente avente
            cardinalità maggiore di \math{Z*}.

            Sia \math{z'} l'elemento in coda a \math{Z'}. Essendo \math{Z^{i}}
            costruito accodando \math{x_{i}} a \math{Z'} ottenendo ancora una
            sequenza crescente, deve aversi \math{z' < x_{i}}. Sia poi
            \math{h < i} il più grande indice tale che \math{x_{h} = z'}. Di
            conseguenza, per come è stato definito \math{W_{i}}, si ottiene
            che \math{Z' \in W_{i}}. Infatti, \math{Z'} è una sottosequenza
            crescente di \math{X_{h}}, la quale termina con \math{x_{h} <
            x_{i}}. Ciò porta però ad una contraddizione: infatti si ha
            \math{\abs{Z*} = \mi{max}_{W \in W_{i}} \{\abs{W}\}}, ma al
            contempo \math{Z'} è membro di \math{W_{i}} ed è stato
            dimostrato che \math{\abs{Z'} > \abs{Z*}}. Occorre allora
            assumere che \math{Z^{i} = Z* | x_{i}} sia effettivamente la
            soluzione ottimale alla \math{i}-esima istanza del problema.
		\end{theorem}

    \subsection{Programmazione dinamica: equazione di ricorrenza}

        Il caso base dell'equazione di ricorrenza è immediato: se
        la sequenza è la sequenza vuota, allora la sottosequenza
        strettamente crescente più lunga vincolata è essa stessa
        la sequenza vuota, che ha lunghezza 0. Se la sequenza é
        composta da un solo elemento, allora la sottosequenza
        strettamente crescente piú lunga vincolata é la stringa
        stessa, che ha lunghezza 1. Infatti, per definizione é
        sia strettamente crescente, dato che é composta da un solo
        elemento, ed é vincolata, dato che di fatto contiene l'ultimo
        (e unico) carattere della sequenza.

        \begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				S_{0} = 0
			\end{math}
        \end{parbox}
        \begin[width = 50%fw]{parbox}
			\begin[mode = display]{math}
				S_{1} = 1
			\end{math}
        \end{parbox}
        \par

        Per quanto riguarda il passo ricorsivo, si ha che una generica
        soluzione per la \math{i}-esima istanza del problema deve essere
        costruita accodando \math{x_{i}} ad sottosequenza strettamente
        crescente tale che tutti gli elementi di tale sottosequenza
        vengono prima, in ordine lessicografico, di \math{x_{i}}. Questo
        perché l'aggiunta di \math{x_{i}} in coda ad una tale sottosequenza
        restituisce ancora una sottosequenza strettamente crescente. La
        soluzione ottimale \math{S_{i}} è data dalla lunghezza della
        sottosequenza con queste caratteristiche più lunga possibile
        aumentata di uno.

        La sottosequenza strettamente crescente più lunga possibile con
        tutti gli elementi che vengono prima, in ordine lessicografico,
        di \math{x_{i}} sarà a sua volta soluzione di una certa istanza
        \math{h} del problema, con \math{h < i}. La soluzione \math{S_{i}}
        é allora data dalla soluzione \math{S_{h}} a cui viene sommato 1.
        Si noti come \math{S_{h}} possa anche non esistere, ed in particolare
        questo si verifica se \math{x_{i}} viene dopo tutti gli altri elementi
        di \math{X_{i}} nell'ordine lessicografico. In questo caso, la soluzione
        per la \math{i}-esima istanza del problema è 1, perché la sottosequenza
        crescente piú lunga possibile vincolata é costituita dal solo
        \math{x_{i}}.

		\begin[mode = display]{math}
			S_{i} =
			\{\table[columnalign = left left]{
				\mi{max}\{S_{h} \thickspace t.c. \thickspace 1 \leq h < i \wedge x_{h} < x_{i}\} + 1 &
				\mi{se} \thickspace \exists S_{h} \\
				1 &
				\mi{se} \thickspace \nexists S_{h} \\
			}
		\end{math}

    \subsection{Programmazione dinamica: implementazione bottom-up}

		L'algoritmo bottom-up viene costruito a partire dall'equazione
		di ricorrenza sfruttando un vettore \math{c}. In ciascuna cella
		\math{c[i]} viene riportato il valore della soluzione ottimale
		per la \math{i}-esima istanza del problema, che viene utilizzata
		per calcolare i valori ottimali per le istanze successive.
		L'algoritmo riceve in input la sequenza \math{X} e restituisce
		in output il vettore \math{c}.

        Si noti come tutte le celle del vettore \math{c}, ad eccezione
        della prima, possono essere inizializzate subito ad 1, perché
        questo è il minimo valore che in una cella può essere presente.
        La prima cella corrisponde invece al caso base in cui la sequenza
        in esame é la sequenza vuota.

        \begin{verbatim}
			procedure BOUNDED-LIS(X)
			    c[0] \unichar{U+2190} 0
			    for i \unichar{U+2190} 1 to |X| do
			        c[i] \unichar{U+2190} 1

			    \bigskip
			    for i \unichar{U+2190} 2 to |X| do
			        t \unichar{U+2190} 0
			        for j \unichar{U+2190} 1 to i - 1 do
			            if (X[j] < X[i]) and (c[j] \unichar{U+2265} t) then
			                t \unichar{U+2190} c[j]
			        c[i] \unichar{U+2190} t + 1

			    \bigskip
			    return c
        \end{verbatim}

        Il problema LIS non vincolato può essere ridotto al problema
		LIS vincolato. Infatti, la soluzione del problema LIS non
		vincolato non è altro che la maggior soluzione parziale del
		problema LIS vincolato.

		\begin{verbatim}
			procedure LIS(X)
			    c[0] \unichar{U+2190} 0
			    for i \unichar{U+2190} 1 to |X| do
			        c[i] \unichar{U+2190} 1
			    best \unichar{U+2190} 0

			    \bigskip
			    for i \unichar{U+2190} 2 to |X| do
			        t \unichar{U+2190} 0
			        for j \unichar{U+2190} 1 to i - 1 do
			            if (X[j] < X[i]) and (c[j] \unichar{U+2265} t) then
			                t \unichar{U+2190} c[j]
			        c[i] \unichar{U+2190} t + 1
			        if (c[i] > best) then
			            best \unichar{U+2190} c[i]

			    \bigskip
			    return best
        \end{verbatim}

        È facile notare come il tempo di esecuzione dell'algoritmo
		sia \math{O(n^{2})}, dove \math{n} è la lunghezza della sequenza
		\math{X}. Il primo ciclo esegue una operazione immediata per
		\math{n} volte, dopodiché si presenta un doppio ciclo innestato:
		il ciclo esterno esegue il ciclo interno \math{n} volte, mentre
		il ciclo interno esegue al più \math{n} volte (dovendo potenzialmente
		ripercorrere l'intera sequenza a ritroso) un blocco di decisione il
		cui tempo di esecuzione può considerarsi immediato. Si ha allora che,
		asintoticamente, \math{O(n) + O(n^{2}) = O(n^{2})}.

    \subsection{Programmazione dinamica: ricostruzione della soluzione}

        Una volta calcolata la lunghezza di una LISV, è possibile
        individuarla introducendo un vettore di appoggio \math{h}
        e ripercorrendolo a ritroso. Nella \math{i}-esima cella di
        tale vettore viene riportato l'indice della cella di \math{c}
        in cui si trova l'elemento predecessore dell'elemento nella
        \math{i}-esima cella di \math{c}. Se l'elemento predecessore
        non esiste, nella \math{i}-esima cella di \math{h} viene
        riportato 0. La nuova procedura restituisce non il vettore
        \math{c}, bensí il vettore \math{h}.

        Alla vecchia procedura opportunamente modificata ne viene aggiunta
        un'altra, \tt{PRINT-BOUNDED-LIS}. Questa ha in input il vettore
        \math{h}, la sequenza \math{X} ed un indice di posizione \math{i},
        mentre in output ha una delle possibili LISV per la stringa in input.

		La procedura restituisce la soluzione per la \math{i}-esima istanza
		del problema ripercorrendo il vettore \math{h} dalla cella \math{i}
		verso la cella \math{0}; ogni volta che si incontra un elemento
		non nullo di \math{h}, l'elemento della sequenza in tale posizione
		è un elemento della soluzione.

		\begin[width = 60%fw]{parbox}
			\begin{verbatim}
			    procedure BOUNDED-LIS(X)
			        c[0] \unichar{U+2190} 0
			        h[0] \unichar{U+2190} 0
			        for i \unichar{U+2190} 1 to |X| do
			            c[i] \unichar{U+2190} 1
			            h[i] \unichar{U+2190} 0

			        \bigskip
			        for i \unichar{U+2190} 2 to |X| do
			            t \unichar{U+2190} 0
			            for j \unichar{U+2190} 1 to i - 1 do
			                if (X[j] < X[i]) and (c[j] \unichar{U+2265} t) then
			                    t \unichar{U+2190} c[j]
			                    h[i] \unichar{U+2190} j
			            c[i] \unichar{U+2190} t + 1

			        \bigskip
			        return h
			\end{verbatim}
		\end{parbox}
		\begin[width = 40%fw]{parbox}
			\begin{verbatim}
				procedure PRINT-BOUNDED-LIS(h, X, i)
				    if h[i] \unichar{U+2260} 0 then
				        PRINT-BOUNDED-LIS(h, X, h[i])
				    print X[i]
			\end{verbatim}
		\end{parbox}
		\par

		Ricordando come la soluzione del problema originale sia la maggior
		soluzione parziale del problema vincolato, é possibile modificare
		la procedura \tt{BOUNDED-LIS} per restituire tale soluzione oltre al
		vettore \math{h}. Le procedure \tt{PRINT-BOUNDED-LIS} e \tt{PRINT-LIS}
		sono identiche: l'unica differenza é che la prima chiamata a \tt{PRINT-LIS}
		deve avere \tt{best} come terzo parametro, di modo da ricavare la soluzione
		per l'istanza corretta.

		\begin[width = 60%fw]{parbox}
			\begin{verbatim}
			    procedure LIS(X)
			        c[0] \unichar{U+2190} 0
			        h[0] \unichar{U+2190} 0
			        for i \unichar{U+2190} 1 to |X| do
			            c[i] \unichar{U+2190} 1
			            h[i] \unichar{U+2190} 0
			        best \unichar{U+2190} 0

			        \bigskip
			        for i \unichar{U+2190} 2 to |X| do
			            t \unichar{U+2190} 0
			            for j \unichar{U+2190} 1 to i - 1 do
			                if (X[j] < X[i]) and (c[j] \unichar{U+2265} t) then
			                    t \unichar{U+2190} c[j]
			                    h[i] \unichar{U+2190} j
			            c[i] \unichar{U+2190} t + 1
			            if (c[i] > best) then
			                best \unichar{U+2190} c[i]

			        \bigskip
			        return h, best
			\end{verbatim}
		\end{parbox}
		\begin[width = 40%fw]{parbox}
			\begin{verbatim}
				procedure PRINT-LIS(h, X, i)
				    if h[i] \unichar{U+2260} 0 then
				        PRINT-LIS(h, X, h[i])
				    print X[i]
			\end{verbatim}
		\end{parbox}
		\par

		Sebbene la procedura sia ricorsiva, il suo tempo di esecuzione
		è comunque proporzionale alle dimensioni del vettore \math{h},
		perché la ricorsione è una tail-recursion. In particolare:

		\begin{itemize}
			\begin{item}
				Quando la sequenza \math{X} é giá di per sé
				strettamente crescente, la procedura viene
				chiamata esattamente \math{\abs{h}} volte.
				Questo perché ogni elemento \math{i}-esimo di
				\math{X} con \math{i > 0} ha per predecessore
				nel vettore \math{h} l'elemento \math{i - 1}-esimo;
			\end{item}
			\begin{item}
				Quando la sequenza \math{X} é decrescente, la procedura
				viene chiamata una sola volta. Questo perché ogni elemento
				di \math{h} é nullo e la procedura entra immediatamente
				nel caso base.
			\end{item}
		\end{itemize}

        \begin{example}
            \begin[width = 30%fw]{parbox}
                \begin[mode = display]{math}
                    \langle 14, 2, 4, 2, 7, 0, 13, 21, 20 \rangle
                \end{math}
            \end{parbox}
            \begin[width = 70%fw]{parbox}
                \begin[cols = 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw 7.5%fw]{ptable}
                    \begin{row}
                        \cell{\math{X_{0}}} \cell{\math{X_{1}}} \cell{\math{X_{2}}}
                        \cell{\math{X_{3}}} \cell{\math{X_{4}}} \cell{\math{X_{5}}}
                        \cell{\math{X_{6}}} \cell{\math{X_{7}}} \cell{\math{X_{8}}}
                        \cell{\math{X_{9}}}
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{1} \cell{1} \cell{2} \cell{1}
                        \cell{3} \cell{1} \cell{4} \cell{5} \cell{5}
                    \end{row}
                    \begin{row}
                        \cell{0} \cell{0} \cell{0} \cell{2} \cell{0}
                        \cell{3} \cell{0} \cell{5} \cell{7} \cell{7}
                    \end{row}
                \end{ptable}
            \end{parbox}
        \end{example}

\end{sile}
