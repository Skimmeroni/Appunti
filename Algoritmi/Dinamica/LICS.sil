\begin{sile}

	\subsection{Definizione del problema}

        Il problema della \strong{Longest Increasing Common Subsequence}
        (\strong{LICS}) prevede di trovare la più lunga sottosequenza
        comune a due sequenze i cui elementi (nell'ordine in cui si
        trovano) hanno valore strettamente crescente.

        \begin{example}
            Siano date le sequenze \math{X = \langle 14, 2, 4, 2, 7, 0,
            13, 21, 11 \rangle} e \math{Y = \langle 13, 2, 6, 5, 4, 11,
            0 \rangle}. Una sottosequenza strettamente crescente comune
            ad \math{X} e a \math{Y} di lunghezza massima è \math{\langle
            2, 4, 11 \rangle}.
        \end{example}

        Anziché affrontare il problema direttamente, si preferisce prima
		trovare la lunghezza di una possibile LICS delle due sequenze e
		poi, sulla base di questa informazione, ricostruire la LICS "a
		ritroso". Pertanto, il problema effettivamente in esame sará il
		problema della lunghezza della sottosequenza strettamente crescente
		comune piú lunga.

		Il problema puó essere risolto mediante programmazione dinamica.
		Date due sequenze \math{X} e \math{Y} di lunghezza rispettivamente
        \math{n} e \math{m}, siano \math{X_{i} = X[1 : i]} e \math{Y_{j} =
        Y[1 : j]} i prefissi di lunghezza \math{i} e \math{j} rispettivamente
        della sequenza \math{X} e della sequenza \math{Y}. La soluzione
        \math{S_{i, j}} per l'\math{i, j}-esima istanza del problema
        corrisponde a trovare la soluzione ottimale per il problema LICS
        rispetto alle sottosequenze \math{X_{i}} e \math{Y_{j}}. La soluzione
        per le intere sequenze \math{X} e \math{Y} è la soluzione per le
        istanze \math{X_{n}} e \math{Y_{m}}.

        Per calcolare la soluzione ottimale della generica istanza \math{X_{i}},
        \math{Y_{j}} ovvero \math{S_{i, j}}, verrá assunto di avere a disposizione
		tutte le soluzioni parziali nella forma \math{S_{a, b}}, con \math{1 \leq
		a < i} e \math{1 \leq b < j}. Pertanto, per il calcolo della soluzione
		ottimale della \math{i, j}-esima istanza del problema si hanno a disposizione
		l'elemento \math{i}-esimo della sequenza \math{X}, ovvero \math{x_{i}},
		l'elemento \math{j}-esimo della sequenza \math{Y}, ovvero \math{y_{j}},
		e le lunghezze delle sottosequenze strettamente crescenti rispetto alle
		istanze da \math{i - 1, j - 1} a 0, 0, ma non gli elementi della sequenza
		che comportano tale lunghezza. \math{x_{i}} e \math{y_{j}} possono essere
		come possono non essere elementi della sottosequenza di \math{X_{i}} e
		\math{Y_{j}} strettamente crescente di lunghezza \math{S_{i, j}}.

	\subsection{Definizione del problema ausiliario}

		Attaccare il problema LICS direttamente tramite programmazione
        dinamica non è possibile, perché manca un'informazione. Infatti,
        se non é noto quali siano gli elementi che hanno indotto le
        lunghezze ottimali parziali da \math{S_{i - 1, j - 1}} a
        \math{S_{0, 0}} non vi é alcun modo di sapere se l'elemento
        \math{i}-esimo edi \math{X} o l'elemento \math{j}-esimo di
        \math{Y} possano essere accodati ad una sottosequenza avente
        peso \math{S_{a, b}} con \math{1 \leq a < i} e \math{1 \leq
        b < j} ottenendo di nuovo una sottosequenza strettamente crescente
        comune di \math{X_{i}} e \math{Y_{j}}. Questo perché le lunghezze
        \math{S_{i, j}} potrebbero riferirsi a sottosequenze che contengono
        elementi che vengono dopo di \math{x_{i}} e/o di \math{y_{j}}
        nell'ordine lessicografico.

        L'unico caso in cui si avrebbe la certezza di ottenere ancora
        una sottosequenza strettamente crescente di \math{X_{i}} e di
        \math{Y_{j}} si ha quando é garantito che la sottosequenza
        soluzione ottimale per l'\math{i, j}-esima istanza contiene
        anche \math{x_{i} = y_{j}}. É pertanto necessario introdurre
        un problema ausiliario che includa l'informazione mancante.

        Una versione più semplice del problema LICS, chiamato \strong{LICS
        vincolato} (\strong{LICSV}), prevede di trovare la più lunga
        sottosequenza comune di due sequenze i cui elementi (nell'ordine
        in cui si trovano) hanno valore strettamente crescente e dove
        l'ultimo elemento di tale sottosequenza coincide con l'ultimo
        elemento di entrambe le sequenze originarie. Anche in questo
        caso, si preferisce considerare non l'effettiva soluzione di
        ciascuna istanza del problema, bensí il suo peso complessivo,
        e poi ricostruire "a ritroso" la soluzione.

        Date due sequenze \math{X} e \math{Y} di lunghezza rispettivamente
        \math{n} e \math{m}, siano \math{X_{i} = X[1 : i]} e \math{Y_{j} =
        Y[1 : j]} i prefissi di lunghezza \math{i} e \math{j} rispettivamente
        della sequenza \math{X} e della sequenza \math{Y}. La soluzione
        \math{S_{i, j}} per l'\math{i, j}-esima istanza del problema
        corrisponde a trovare la soluzione ottimale per il problema LICS
        vincolato rispetto alle sottosequenze \math{X_{i}} e \math{Y_{j}}.
        La soluzione per le intere sequenze \math{X} e \math{Y} è la
        soluzione per le istanze \math{X_{n}} e \math{Y_{m}}.

		Per calcolare la soluzione ottimale della generica istanza \math{X_{i}},
        \math{Y_{j}} ovvero \math{S_{i, j}}, verrá assunto di avere a disposizione
		tutte le soluzioni parziali nella forma \math{S_{a, b}}, con \math{1 \leq
		a < i} e \math{1 \leq b < j}. Pertanto, per il calcolo della soluzione
		ottimale della \math{i, j}-esima istanza del problema si hanno a disposizione
		l'elemento \math{i}-esimo della sequenza \math{X}, ovvero \math{x_{i}},
		l'elemento \math{j}-esimo della sequenza \math{Y}, ovvero \math{y_{j}},
		e le lunghezze delle sottosequenze strettamente crescenti rispetto alle
		istanze da \math{i - 1, j - 1} a 0, 0, ma non gli elementi della sequenza
		che comportano tale lunghezza. A differenza del problema originale,
		\math{x_{i}} e \math{y_{j}} devono non solo essere uguali, ma devono
		anche essere per forza un elemento (in particolare, l'ultimo) della
		sottosequenza strettamente crescente comune di \math{X_{i}} e di
		\math{Y_{j}} di lunghezza \math{S_{i}}.

        \begin{example}
            Siano date le sequenze \math{X = \langle 14, 2, 4, 6, 13, 15,
            0 \rangle} e \math{Y = \langle 13, 2, 6, 5, 4, 11, 0 \rangle}.
            Una sottosequenza strettamente crescente di massima lunghezza
            comune ad \math{X} e ad \math{Y} è \math{\langle 2, 4 \rangle}.
            D'altro canto, la sottosequenza strettamente crescente di
            massima lunghezza comune ad \math{X} e ad \math{Y} vincolata
            è \math{\langle 0 \rangle}.
        \end{example}

    \subsection{Programmazione dinamica: sottostruttura ottima}

        \begin{theorem}
			\strong{Proprietà della sottostruttura ottima per il
			problema Longest Increasing Common Subsequence (Vincolato)}.
			Sia \math{X} una sequenza di \math{m} numeri interi e sia
			\math{X_{i}} un suo prefisso di lunghezza \math{i}, con
			\math{1 \leq i \leq m}. Sia \math{Y} una sequenza di
			\math{n} numeri interi e sia \math{Y_{j}} un suo prefisso
			di lunghezza \math{j}, con \math{1 \leq j \leq n}.

			Sia \math{Z^{i,j}} una LICSV di \math{X_{i}} e di
			\math{Y_{j}} tale che termini con \math{x_{i} = y_{j}}.
			Sia infine \math{W_{i,j}} l'insieme di tutte le possibili
			sottosequenze crescenti comuni (non necessariamente le più
			lunghe) di \math{X_{h}} e di \math{Y_{k}} che finiscono
			con \math{x_{h} = y_{k}} e a cui è possibile concatenare
			\math{x_{i}} (o \math{y_{j}}) ottenendo ancora una sequenza
			crescente comune, ovvero:

			\smallskip
            \begin{center}
                \begin{math}
                    W_{i, j} = \bigcup_{1 \leq h < i; \thickspace i \leq k < j;
                    \thickspace x_{h} = y_{k} < x_{i} = y_{j}}
                \end{math}
                \{\math{W} sottosequenza comune crescente di \math{X_{h}} e di
                \math{Y_{k}} che termina con \math{x_{h} = y_{k}}\}
            \end{center}
            \bigskip

            Allora la LICSV \math{Z^{i, j}} è data dalla concatenazione
            fra l'elemento di \math{W_{i, j}} avente la maggior cardinalità
            con il carattere \math{x_{i}} o con il carattere \math{y_{j}},
            ovvero \math{Z^{i, j} = Z* | x_{i} = Z* | y_{j}} con \math{Z*
            \in W_{i, j}} e \math{\abs{Z*} = \mi{max}_{W \in W_{i, j}}
            \{\abs{W}\}}.

            \bigskip
            \strong{Dimostrazione}. Si supponga per assurdo che
            \math{Z^{i, j} = Z* | x_{i} = Z* | y_{j}} non sia la
            soluzione ottimale per l'\math{i, j}-esima istanza
            del problema. Questa deve allora essere \math{Z^{i, j}
            = Z' | x_{i} = Z' | y_{j}}, dove \math{Z'} è una
            sottosequenza crescente comune avente cardinalità
            maggiore di \math{Z*}.

            Sia \math{z'} l'elemento in coda a \math{Z'}. Essendo
            \math{Z^{i, j}} costruito accodando \math{x_{i} = y_{j}}
            a \math{Z'} ottenendo ancora una sequenza crescente,
            deve aversi \math{z' < x_{i} = y_{j}}. Siano poi
            \math{r < i} e \math{s < j} la più grande coppia di
            indici tali per cui \math{x_{r} = y_{s} = z'}. Di
            conseguenza, per come è stato definito \math{W_{i}},
            si ottiene che \math{Z' \in W_{i, j}}. Infatti, \math{Z'}
            è una sottosequenza crescente comune di \math{X_{r}} e di
            \math{Y_{s}}, la quale termina con \math{x_{r} < x_{i} =
            y_{j}}. Ciò porta però ad una contraddizione: infatti si
            ha \math{\abs{Z*} = \mi{max}_{W \in W_{i, j}} \{\abs{W}\}},
            ma al contempo \math{Z'} è membro di \math{W_{i, j}} ed è
            stato dimostrato che \math{\abs{Z'} > \abs{Z*}}. Occorre
            allora assumere che \math{Z^{i, j} = Z* | x_{i} = Z* | y_{j}}
            sia effettivamente la soluzione ottimale alla \math{i}-esima
            istanza del problema.
        \end{theorem}

	\subsection{Programmazione dinamica: equazione di ricorrenza}

        Certamente, la soluzione per tutte le coppie di indici \math{i, j}
        con \math{i = 0} oppure \math{j = 0} si rivela immediatamente essere 
        la sequenza vuota, perché questa è l'unica sottosequenza che una
        sequenza generica può avere in comune con la sequenza vuota stessa.

        Tuttavia, anche nel caso in cui \math{x_{i} \ne y_{j}}, ovvero
        quando le due sottosequenze \math{X_{i}} e \math{Y_{j}} non terminano
        con lo stesso carattere, la sottosequenza crescente comune più lunga
        è la sequenza vuota. Questo perché il problema chiede di trovare una
        sottosequenza che termini con il carattere (uguale) delle due sequenze,
        e se tale carattere è distinto l'unica soluzione accettabile non può
        che essere la sequenza vuota.

        Dato che, per definizione, l'ultimo elemento della sequenza vuota
        (non esistendo) non può coincidere con l'ultimo carattere dell'altra
        sequenza, il caso \math{i = 0 \vee j = 0} rientra di fatto nel caso
        \math{x_{i} \ne y_{j}}, pertanto è sufficiente considerare solamente
        quest'ultimo come caso base.

		\begin[mode = display]{math}
			S_{i, j} = 0 \thickspace \mi{se} \thickspace x_{i} \ne y_{j}
		\end{math}

        Per quanto riguarda il passo ricorsivo, si ha che una generica
        soluzione per la \math{i, j}-esima istanza del problema deve essere
        costruita accodando \math{x_{i} = y_{j}} ad sottosequenza strettamente
        crescente comune tale che tutti gli elementi di tale sottosequenza
        vengono prima, in ordine lessicografico, di \math{x_{i} = y_{j}}.
        Questo perché l'aggiunta di \math{x_{i} = y_{j}} in coda ad una
        tale sottosequenza restituisce ancora una sottosequenza strettamente
        crescente comune. La soluzione ottimale \math{S_{i, j}} è data dalla
        lunghezza della sottosequenza con queste caratteristiche più lunga
        possibile aumentata di uno.

        La sottosequenza strettamente crescente comune più lunga possibile
        con tutti gli elementi che vengono prima, in ordine lessicografico,
        di \math{x_{i} = y_{j}} sarà a sua volta soluzione di una certa
        istanza \math{h, k} del problema, con \math{h < i} e \math{k < j}.
        La soluzione \math{S_{i, j}} é allora data dalla soluzione \math{S_{h,
        k}} a cui viene sommato 1. Si noti come \math{S_{h, k}} possa anche non
        esistere, ed in particolare questo si verifica se \math{x_{i} = y_{j}}
        viene dopo tutti gli altri elementi di \math{X_{i}} e di \math{Y_{j}}
        nell'ordine lessicografico. In questo caso, la soluzione per la
        \math{i, j}-esima istanza del problema è 1, perché la sottosequenza
        crescente piú lunga possibile vincolata é costituita dal solo
        \math{x_{i} = y_{j}}.

		\begin[mode = display]{math}
			S_{i, j} =
			\{\table[columnalign = left left]{
				\mi{max}\{S_{h, k} | 1 \leq h < i, 1 \leq k < j, x_{h} < x_{i}\} + 1 &
				\mi{se} \thickspace \exists S_{h, k} \\
				0 &
				\mi{se} \thickspace \nexists S_{h, k} \\
			}
		\end{math}

	\subsection{Programmazione dinamica: implementazione bottom-up}

		L'algoritmo bottom-up viene costruito a partire dall'equazione
		di ricorrenza sfruttando una tabella \math{c}. In ciascuna cella
		\math{c[i, j]} viene riportato il valore della soluzione ottimale
		per la \math{i, j}-esima istanza del problema, che viene utilizzata
		per calcolare i valori ottimali per le istanze successive. L'algoritmo
		riceve in input le due sequenze \math{X} e \math{Y} e restituisce in
		output la tabella \math{c}. 

		\begin{verbatim}
			procedure BOUNDED-LICS(X, Y)
			    for i \unichar{U+2190} 1 to m do
			        for j \unichar{U+2190} 1 to n do
			            if X[i] \unichar{U+2260} Y[j] then
			                c[i, j] \unichar{U+2190} 0
			            else
			                p \unichar{U+2190} 0
			                q \unichar{U+2190} 0
			                for a \unichar{U+2190} 1 to i - 1 do
			                    for b \unichar{U+2190} 1 to j - 1 do
			                        if (X[a] < X[i]) and (c[a, b] > c[p, q]) then
			                            p \unichar{U+2190} a
			                            q \unichar{U+2190} b
			                if (p \unichar{U+2260} 0) and (q \unichar{U+2260} 0) then
			                    c[i, j] \unichar{U+2190} c[p, q] + 1
			    return c
		\end{verbatim}

		Il problema LIS non vincolato può essere ridotto al problema
		LIS vincolato. Infatti, la soluzione del problema LIS non
		vincolato non è altro che la maggior soluzione parziale del
		problema LIS vincolato.

		\begin{verbatim}
			procedure LICS(X, Y)
			    best \unichar{U+2190} 0
			    for i \unichar{U+2190} 1 to m do
			        for j \unichar{U+2190} 1 to n do
			            if X[i] \unichar{U+2260} Y[j] then
			                c[i, j] \unichar{U+2190} 0
			            else
			                t \unichar{U+2190} 0
			                for a \unichar{U+2190} 1 to i - 1 do
			                    for b \unichar{U+2190} 1 to j - 1 do
			                        if (X[a] < X[i]) and (c[a, b] \unichar{U+2265} t) then
			                            t \unichar{U+2190} c[a, b]
			                c[i, j] \unichar{U+2190} t + 1
			            if (c[i] > best) then
			                best \unichar{U+2190} c[i]
			    return best
		\end{verbatim}

		Il tempo di esecuzione dell'algoritmo è \math{O(m^{2}n^{2})},
		dove \math{m} è la lunghezza della sequenza \math{X} e \math{n}
		è la lunghezza della sequenza \math{Y}. Si noti infatti come
		l'algoritmo sia costituito da due cicli innestati, dove il
		primo esegue il secondo \math{m} volte ed il secondo esegue
		potenzialmente \math{n} volte a sua volta una coppia di cicli
		innestati, dove il primo esegue il secondo al più \math{m}
		volte ed il secondo esegue al più \math{n} volte un blocco di
		istruzioni avente tempo di esecuzione immediato. Si ha quindi
		\math{O(m \cdot n \cdot (m \cdot n)) = O(m^{2}n^{2})}.

	\subsection{Programmazione dinamica: ricostruzione di una soluzione}

        Una volta calcolata la lunghezza della LICSV, è possibile
        individuarne una ripercorrendo la tabella a ritroso. In
        particolare, questo viene fatto estendendo l'algoritmo per
        il calcolo della lunghezza introducendo una tabella \math{h}.
        Nella \math{i, j}-esima cella di \math{h} viene riportato
        l'indice della cella di \math{c} in cui si trova l'elemento
        predecessore dell'elemento nella \math{i, j}-esima cella di
        \math{c}. Se l'elemento predecessore non esiste, nella
        \math{i, j}-esima cella di \math{h} viene riportato (0, 0).

        Alla vecchia procedura opportunamente modificata ne viene aggiunta
        un'altra, \tt{PRINT-BOUNDED-LICS}. Questa ha in input la tabella
        \math{h}, le due sequenze \math{X} e \math{Y} e due indici di
        posizione \math{i} e \math{j}, mentre in output ha una delle
        possibili LICSV per la sequenza in input.

        La procedura restituisce la soluzione per la \math{i, j}-esima
        istanza del problema ripercorrendo la tabella \math{h} dalla
        cella \math{(i, j)} verso la cella \math{(0, 0)}; ogni volta che
        si incontra un elemento non nullo di \math{h}, l'elemento della
        sequenza in tale posizione è un elemento della soluzione.

	\begin[width = 60%fw]{parbox}
		\begin{verbatim}
			procedure BOUNDED-LICS(X, Y)
			    for i \unichar{U+2190} 1 to m do
			        for j \unichar{U+2190} 1 to n do
			            if X[i] \unichar{U+2260} Y[j] then
			                c[i, j] \unichar{U+2190} 0
			                h[i, j] \unichar{U+2190} 0
			            else
			                p \unichar{U+2190} 0
			                q \unichar{U+2190} 0
			                for a \unichar{U+2190} 1 to i - 1 do
			                    for b \unichar{U+2190} 1 to j - 1 do
			                        if (X[a] < X[i]) and (c[a, b] > c[p, q]) then
			                            p \unichar{U+2190} a
			                            q \unichar{U+2190} b
			                if (p \unichar{U+2260} 0) and (q \unichar{U+2260} 0) then
			                    c[i, j] \unichar{U+2190} c[p, q] + 1
			                    h[i, j] \unichar{U+2190} (p, q)
			    return c
		\end{verbatim}
	\end{parbox}
	\begin[width = 40%fw]{parbox}
		\begin{verbatim}
			procedure PRINT-BOUNDED-LICS(h, X, Y, i, j)
			    if h[i, j] \unichar{U+2260} (0, 0) then
			        a, b \unichar{U+2190} h[i, j]
			        PRINT-BOUNDED-LICS(h, X, Y, a, b)
			        print X[i], Y[j]
		\end{verbatim}
	\end{parbox}

\end{sile}
