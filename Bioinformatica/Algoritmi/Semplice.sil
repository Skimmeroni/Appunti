\begin{sile}

	Una \strong{struttura dati} é un modo per organizzare e gestire una collezione 
	di dati. L'implementazione di una struttura dati richiede in genere di 
	costruire degli algoritmi che la gestiscono e la manipolano: cercare (se 
	esiste) uno specifico dato, inserire (se possibile) un dato, eliminare un 
	dato, eccetera. Viceversa, diversi algoritmi si appoggiano a delle strutture
	dati per le loro computazioni.

	\subsection{Array}

		Un \strong{array} é una \strong{struttura indicizzata} costituita da una collezione 
		di celle numerate a partire da 0 che possono contenere elementi di un tipo
		prestabilito. La \strong{dimensione} di un array, ovvero il numero massimo di 
		elementi che puó contenere, viene fissata quando l'array viene creata,
		e non é possibile modificarla.

		Il fatto che sia una struttura indicizzata, ovvero dove ogni elemento ha 
		assegnato un numero ordinato, implica che sia possibile raggiungere una 
		certa cella con tempo costante \math{O(1)}. Allo stesso modo, aggiungere
		o eliminare un elemento da un array é una operazione immediata (in tempo
		\math{O(1)}). Non potendo peró modificare direttamente la dimensione di
		un array, l'unico modo per farlo é mediante \strong{riallocazione}, ovvero 
		creare un secondo array (piú grande o piú piccolo) e copiarvi tutti i 
		dati del precedente; evidentemente questo procedimento richiede tempo 
		lineare \math{O(n)}.

	\subsection{Liste concatenate}

		Una \strong{lista concatenata} é costituita da un insieme di \strong{record}, simili
		alle celle degli array ma che, anziché essere ordinate sequenzialmente, sono
		fra loro collegati da dei puntatori. Se i record di una lista concatenata
		hanno un puntatore al record successivo ma non al precedente, la lista 
		concatenata é detta \strong{semplice}, ed é percorribile in una sola direzione;
		se invece i record di una lista concatenata hanno un puntatore al record 
		successivo ed un puntatore al record precedente, la lista concatenata é 
		detta \strong{doppia}, ed é percorribile in entrambe le direzioni. Le uniche 
		eccezioni sono l'ultimo record, che non punta a nulla e il primo record, a
		cui nessun record punta.

		Il vantaggio delle liste concatenate é che non hanno una dimensione fissata, 
		pertanto é possibile aggiungere un nuovo record semplicemente collegando il
		puntatore in uscita dall'ultimo record al puntatore in entrata al nuovo 
		record, in tempo \math{O(1)}. Si ha peró che, non essendo i record 
		indicizzati, non é possibile accedere direttamente ad uno specifico record 
		ma é necessario attraversare tutta la lista a partire dal primo record, e 
		questo richiede un tempo \math{O(n)}.

	\subsection{Pile}

		Una \strong{pila} é una struttura dati basata sulla disciplina di accesso 
		\strong{LIFO} (\em{Last In First Out}), ovvero dove l'elemento di prima 
		posizione é l'ultimo elemento che é stato inserito. Gli inserimenti in
		una pila (\tt{push}) aggiungono elementi alla fine della sequenza, 
		mentre le cancellazioni (\tt{pop}) ne rimuovono sempre l'ultimo elemento.
		In una pila, gli accessi avvengono sempre ad una sola estremitá, e nessun
		elemento interno puó essere estratto prima che tutti gli altri elementi 
		che lo seguono sono stati estratti. Una pila puó essere vista come una 
		lista concatenata semplice della quale é possibile manipolare soltanto
		una delle due estremitá.

	\subsection{Code}

		Una \strong{coda} é una struttura dati basata sulla disciplina di accesso 
		\strong{FIFO} (\em{First In First Out}), ovvero dove l'elemento di prima 
		posizione é il primo elemento che é stato inserito. Gli inserimenti in
		una coda (\tt{enqueue}) aggiungono elementi alla fine della sequenza, 
		mentre le cancellazioni (\tt{dequeue}) ne rimuovono sempre il primo elemento.
		In una coda, gli accessi possono avvenire ad entrambe le estremitá, e nessun
		elemento interno puó essere estratto prima che tutti gli altri elementi 
		che lo precedono sono stati estratti. Una coda puó essere vista come una 
		lista concatenata doppia della quale é possibile manipolare soltanto le due 
		estremitá.

	\subsection{Alberi}

		Un \strong{albero} é una coppia \math{T = (N, A)} costituita da un insieme 
		\math{N} di \strong{nodi} e da un insieme \math{A \subseteq N \times N} di 
		coppie di nodi, detti \strong{archi}. In un albero, ogni nodo \math{v} ha 
		uno ed un solo \em{genitore} \math{u} tale per cui \math{(u, v) \in A};
		l'unica eccezione é il nodo \strong{radice}, il nodo da cui tutti gli altri
		nodi derivano. Un nodo \math{u} puó avere zero o piú \em{figli} \math{v}
		tali che \math{(u, v) \in A}, ed il loro numero viene chiamato \strong{grado}
		del nodo. Un nodo che non ha figli é chiamato \strong{foglia}, mentre un
		nodo che ha sia dei figli che dei genitori é detto \strong{nodo interno}. La
		\strong{profonditá} di un nodo é il numero di archi che occorre attraversare,
		a partire dalla radice, per raggiungerlo; l'\strong{altezza} di un albero é
		la massima profonditá a cui é possibile trovare una foglia. Viene detto
		\strong{albero n-ario} un albero costituito esclusivamente da nodi (interni)
		di grado \math{n}; un albero \math{n}-ario in cui tutte le foglie sono
		sullo stesso livello é detto \strong{completo}.

		Un albero puó essere implementato sia mediante array, sia mediante liste
		concatenate, anche se la seconda opzione é preferibile. Questo puó essere
		fatto rappresentando ogni nodo dell'albero con un record che contiene 
		l'informazione associata al nodo, piú altri puntatori che consentono di 
		raggiungere i nodi a cui questo é collegato. In particolare, se ci si limita 
		al caso in cui l'albero é composto esclusivamente da nodi aventi grado non 
		superiore a \math{d}, con \math{d} valore fissato, é possibile costruire 
		l'albero semplicemente mantenendo in ogni nodo un puntatore a ciascuno dei 
		possibili \math{d} figli; se un nodo ha meno di \math{d} figli, alcuni dei
		puntatori non punteranno a nulla.

		Restituire il contenuto dei nodi di un albero non é una operazione scontata: 
		a differenza delle strutture dati precedenti, in un albero ad ogni elemento
		puó essere associato piú di un elemento ordinatamente successivo, pertanto
		é possibile che si abbiano delle ramificazioni. L'approccio piú usato viene
		detto \strong{visita in profonditá}, ed é basato sulla ricorsione: se il nodo non 
		ha figli, se ne restituisce il contenuto, mentre se ha figli la funzione viene
		ricorsivamente applicata a questi.

		\begin{verbatim}
			class Node:
			\bigskip
			    def __init__(self, value):                    # Create an object for a node,
			        self.sons = []                            # where pointers to its sons 
			        self.value = value                        # are saved in a list
			\bigskip
			def printTree(node):
			    if (len(self.sons) == 0):                     # If the node has no 
			        print(value)                              # sons, print its value
			    else:
			        for i in range (0, len(self.sons))        # Otherwise, apply recursively
			        printTree(self.sons[i])                   # onto them
		\end{verbatim}

\end{sile}
