\begin{sile}

	Il \strong{problema dell'ordinamento} é un problema molto ricorrente e molto 
	semplice da esprimere: dato un insieme di numeri (per comoditá, si assume
	interi), si richiede di disporli in ordine crescente. 

	\subsection{Insertion sort}

		\strong{Insertion sort} é un semplice esempio di algoritmo di ordinamento 
		iterativo. Sia \math{A} un array di numeri di lunghezza \math{n}, e si 
		supponga che i primi \math{k} elementi di \math{A} siano giá ordinati 
		(\math{k} puó anche valere 0). Insertion sort prevede di inserire 
		l'elemento di posizione \math{k + 1} nella posizione ordinata nel 
		sottoinsieme \math{0, ..., k} ripetendo il procedimento fino a quando
		\math{k = n} (ovvero, tutto l'array é ordinato).

		\begin{code}
			\begin{verbatim}
				values = [...]
				\bigskip
				for i in range (0, len(values)):
				    key = values[i]                           # Inspect the first unsorted element
				    j = i - 1
				    while (j >= 0 and values[j] > key):       # As long as a higher value is found,
				        values[j + 1] = values[j]             # keep shifting values right
				        j = j - 1
				    values[j + 1] = key                       # Put the value in its proper place
				\bigskip
				print(values)
			\end{verbatim}
		\end{code}

	\subsection{Selection sort}

		\begin{code}
			\begin{verbatim}
				values = [...]

				\bigskip
				for i in range (0, len(values)):
				    minimum = i 
				    for j in range (i, len(values)):
				        if (values[j] < values[minimum]):
				            minimum = j
				            temp = values[minimum]
				            values[minimum] = values[i]
				            values[i] = temp 

				\bigskip
				print(values)
			\end{verbatim}
		\end{code}

	\subsection{Bubble sort}

		\begin{code}
			\begin{verbatim}
				values = [...] 
				isSorted = False 

				\bigskip
				while (not isSorted): 
				    isSorted = True 
				    for i in range (0, len(values) - 1):
				        if (values[i] > values[i + 1]):
				            temp = values[i + 1]
				            values[i + 1] = values[i]
				            values[i] = temp
				            isSorted = False

				\bigskip
				print(values)
			\end{verbatim}
		\end{code}

	\subsection{Merge sort}

		\strong{Merge sort} é un algoritmo ricorsivo costruito mediante una tecnica 
		chiamata \strong{divide et impera}. Questa tecnica prevede, in termini molto 
		generali, nel suddividere i dati in ingresso in sottoinsiemi (\em{divide}), 
		risolvere ricorsivamente il problema su questi sottoinsiemi e poi ricombinare 
		la soluzione dei sottoinsiemi (\em{impera}) per ottenere la soluzione globale 
		del problema originario. Nel caso specifico di merge sort, i due passi della 
		tecnica possono essere esplicitati come segue:

		\begin[cols = 20%fw 80%fw, cellborder = 0]{ptable}
			\begin{row}
				\begin{cell}
					\em{Divide}
				\end{cell}
				\begin{cell}
					Si divida l'insieme da ordinare in due sottoinsiemi 
					di cardinalitá bilanciata e li si ordini ricorsivamente.
				\end{cell}
			\end{row}
			\begin{row}
				\begin{cell}
					\em{Impera}
				\end{cell}
				\begin{cell}
					Si fondano due sottoinsiemi ordinati 
					in un unico insieme ordinato.
				\end{cell}
			\end{row}
		\end{ptable}

		\begin{code}
			\begin{verbatim}
				values = [...]

				\bigskip
				def mergesort(array, left, right):
				    if (left < right):
				        center = int((left + right) / 2)
				        mergesort(array, left, center)
				        mergesort(array, center + 1, right)
				        merge(array, left, center, right)

				\bigskip
				def merge(array, left, center, right):
				    subLeft = center - left + 1
				    subRight = right - center

				    \bigskip
				    A = [0] * subLeft
				    B = [0] * subRight

				    \bigskip
				    for a in range (0, subLeft):
				        A[a] = array[left + a]

				    \bigskip
				    for b in range (0, subRight):
				        B[b] = array[center + b + 1]

				    \bigskip
				    i = j = 0
				    current = left

				    \bigskip
				    while (i < subLeft and j < subRight):
				        if (A[i] <= B[j]):
				            array[current] = A[i]
				            i = i + 1
				        else:
				            array[current] = B[j]
				            j = j + 1
				        current = current + 1

				    \bigskip
				    while (i < subLeft):
				        array[current] = A[i]
				        i = i + 1
				        current = current + 1

				    \bigskip
				    while (j < subRight):
				        array[current] = B[j]
				        j = j + 1
				        current = current + 1

				\bigskip
				mergesort(values, 0, len(values) - 1)
				print(values)
			\end{verbatim}
		\end{code}

	\subsection{Counting sort}

		\strong{Counting sort} é un altro esempio di algoritmo iterativo: sia \math{A} 
		un array di numeri di lunghezza \math{n}, e siano \math{min} e \math{max} i 
		valori rispettivamente piú piccolo e piú grande che compaiono in \math{A}. 
		Sia poi \math{k} l'ampiezza dell'intervallo dei numeri che compaiono in 
		\math{A}, ottenuta dalla differenza tra \math{max} e \math{min}. Si 
		costruisca un array \math{B} di lunghezza \math{k}, dove andranno riportate 
		le occorrenze di ciascun valore che compare in \math{A}. La mappatura tra 
		\math{A} e \math{B} viene realizzata in questo modo: la prima cella di 
		\math{B} contiene il numero di volte che \math{min} compare in \math{A}, la 
		seconda cella di \math{B} contiene il numero di volte che il successore di 
		\math{min} compare in \math{A}, la terza cella di \math{B} contiene il numero 
		di volte che il successore del successore di \math{min} compare in \math{A}, 
		e cosí via fino ad esaurire tutti i valori che compaiono in \math{A}. É 
		possibile ottenere l'array ordinato semplicemente riportando ordinatamente 
		da sinistra a destra quante volte compare (anche zero volte) ciascun 
		\math{i}-esimo valore di \math{A} desumendoli da \math{B}.

		\begin{code}
			\begin{verbatim}
				values = [...] 

				\bigskip
				lowest  = min(values) 
				highest = max(values) 

				\bigskip
				result   = [0] * len(values) 
				counters = [0] * (highest - lowest + 1) 

				\bigskip
				for i in range (0, len(values)):               # Count the occurrences
				    counters[values[i] - lowest] += 1          # of each member

				\bigskip
				for i in range (1, len(counters)):             # Compute the cumulative
				    counters[i] += counters[i - 1]             # frequencies

				\bigskip
				for t in range (len(values) - 1, 0, -1):       # Print each value, properly
				    key = values[t] - lowest                   # shifted, as many times as
				    result[counters[key] - 1] = values[t]      # its occurrency
				    counters[key] -= 1

				\bigskip
				print(result)
			\end{verbatim}
		\end{code}

\end{sile}
