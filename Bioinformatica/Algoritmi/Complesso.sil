\begin{sile}

	\subsection{Heap}

		Uno \bf{heap} é un albero binario che rispetta le seguenti proprietá: 
		é completo almeno fino al penultimo livello, ad ogni nodo é associato 
		un valore univoco, che non puó trovarsi in nessun altro nodo, ed il 
		valore contenuto in un nodo é sempre maggiore o uguale a quello contenuto 
		nei suoi figli (se ne ha). Uno heap avente \math{n} nodi ha altezza 
		\math{\Theta log(n)}. Dalla definizione di heap si evince che il nodo
		a cui é associato il valore maggiore é la radice, mentre il nodo a cui 
		é associato il valore minore é uno dei nodi foglia.

		Eliminare un nodo foglia é semplice, mentre eliminare un nodo interno 
		potrebbe "rompere" la struttura dello heap. Ció che é possibile fare
		con facilitá é invece scambiare i valori contenuti in un nodo foglia 
		qualsiasi con quello contenuto nel nodo da eliminare, e dopodiché 
		eliminare il neonato nodo foglia; questo permette di preservare la 
		struttura dello heap, ma potrebbe invalidare la terza proprietá (che
		i valori associati ai nodi siano maggiori o uguali dei valori associati
		ai figli). Perché questo non accada occorre, dopo aver effettuato lo 
		scambio, effettuare ripetuti confronti tra i valori dei nodi, scambiando
		i valori contenuti nei nodi in modo da "spingere" i valori piú piccoli
		in basso. Questa procedura viene genericamente chiamata \tt{heapify}.
		Similmente, per aggiungere un nodo ad uno heap preservandone le proprietá 
		é sufficiente aggiungere il nodo come foglia, scambiarne il valore con la 
		radice e ricostruire la struttura.

		\begin{verbatim}
			#include <stdio.h> 
			#include <stdlib.h>
			\bigskip
			#define SIZE 10
			\bigskip
			void heapify(unsigned int* theHeap, int curr) 
			\{
			    int biggest = curr;
			    int l = curr * 2;
			    int r = (curr * 2) + 1;
			\bigskip
			    if (theHeap[biggest] < theHeap[l] && l < SIZE)
			        biggest = l;
			\bigskip
			    if (theHeap[biggest] < theHeap[r] && r < SIZE)
			        biggest = r;
			\bigskip
			    if (biggest != curr) \{
			        swap(&theHeap[curr], &theHeap[biggest]);
			        heapify(theHeap, biggest);
			    \}
			\}
		\end{verbatim}

	\subsection{Tabella hash}

		Una \bf{tabella hash} é una struttura dati che costruisce corrispondenze fra
		delle chiavi e dei valori. Una tabella hash puó essere implementato mediante
		un array dove ogni indice é associato ad un valore, e a sua volta ogni chiave
		é associata ad un indice. L'associazione fra indici e chiavi é data da una 
		\bf{funzione di hashing}, una funzione \math{h : U \rightarrow \{0, ..., n - 
		1\}} con \math{n} la dimensione dell'array, che manipola una chiave per 
		ricavarne un indice univoco. Una funzione di hashing si dice \bf{perfetta}
		se é iniettiva, ovvero se non soltanto ad ogni indice é associata una sola 
		chiave ma al contempo ad ogni chiave é associato un solo indice. In altri 
		termini, una funzione di hashing é perfetta se la risultante tabella hash 
		ha abbastanza celle da poter contenere valori associati ad ogni chiave
		possibile.

		La definizione di tabella hash non include una definizione specifica di 
		funzione di hashing, ma una funzione che viene molto spesso utilizzata 
		é nella forma \math{h(k) = k mod n}, dove \math{k} é una chiave ed \math{n}
		é la dimensione dell'array che costituisce la tabella. A prescindere da 
		quale funzione di hashing si utilizzi, nella pratica il numero di chiavi 
		possibili é spesso enorme, e di conseguenza avere una funzione di hashing 
		perfetta richiederebbe di avere un array a sua volta enorme. In genere, si 
		preferisce avere una funzione di hashing non perfetta; questo comporta peró 
		che questa non sia iniettiva, e quindi vi siano dei valori che la funzione
		di hashing associa alla stessa chiave. Un approccio molto semplice al problema
		prevede di associare a ciascuna cella dell'array che costituisce la tabella
		non un singolo valore, ma bensí una lista concatenata; in questo modo se piú
		valori competono per uno stesso indice é sufficiente concatenarli. 

\end{sile}
