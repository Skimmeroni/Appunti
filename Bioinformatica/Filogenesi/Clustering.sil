\begin{sile}

	Prende il nome di \strong{algoritmo di clustering} un algoritmo che raggruppa 
	gli elementi di un certo insieme in un certo numero di \strong{clusters}. Un 
	cluster é un sottoinsieme di un insieme piú grande che rispetta due proprietá: 
	\em{omogeneitá} e \em{separazione}. La prima prevede che gli elementi di un
	cluster siano fra loro molto simili, mentre la seconda prevede che gli elementi
	di cluster siano molto diversi dagli elementi di tutti gli altri cluster. 

	Un particolare modo di intendere il clustering é il \strong{clustering gerarchico},
	che ha una forte connessione con le strutture ad albero. L'idea del clustering
	gerarchico é quella di, dato un certo insieme di elementi, costruire un certo 
	insieme di cluster, costruire dei cluster che inglobano questi cluster, e cosí
	via. Un clustering gerarchico puó essere convertito in un albero semplicemente
	notando come i cluster piú esterni, che contengono i piú interni, corrispondono
	ai nodi dell'albero piú in alto, da cui discendono i nodi in basso. In 
	particolare: il cluster piú grande é la radice, i suoi sottocluster sono i nodi
	di primo livello, i rispettivi sottocluster dei sottocluster sono i nodi di 
	secondo livello, e via dicendo.

	Il clustering, ed in particolare quello gerarchico, puó essere applicato 
	anche alla ricostruzione della filogenesi: due specie fanno parte di uno 
	stesso ipotetico cluster se la distanza delle rispettive stringhe genomiche 
	é piccola, mentre faranno parte di cluster diversi se la distanza delle 
	rispettive stringhe genomiche é grande. Ad ogni cluster cosí costruito puó
	venire assegnato un nuovo valore di distanza sulla base della distanza dei
	suoi elementi (in genere, una qualche forma di media pesata), che funge da
	"centro di massa" del cluster, e sulla base di questi i cluster possono 
	essere inglobati in supercluster.

	Se é possibile costruire un clustering gerarchico a partire da un insieme di 
	specie, é poi possibile risolvere il problema della filogenesi semplicemente 
	convertendo tale clustering in un albero, che per il modo in cui é stato 
	definito sará un albero filogenetico. Gli algoritmi che costruiscono un 
	clustering gerarchico a partire da un insieme di specie sono molto simili, 
	e le uniche due notevoli differenze si hanno nel metodo utilizzato per 
	determinare quale sia la coppia di cluster candidata a venire fusa e come 
	calcolare il "centro di massa" di ciascun cluster. Due algoritmi molto noti
	sono \strong{UPGMA} e \strong{Neighbor-Joining}.

	\subsection{UPGMA}

		L'algoritmo \strong{UPGMA} (\strong{unweighted pair group with arithmetic mean}) 
		é un algoritmo di clustering molto semplice, che a partire dal clustering 
		costruisce un albero ultrametrico. L'algoritmo si basa sul definire una 
		distanza per ciascuna coppia di cluster \math{(C_{1}, C_{2})} mediante la
		seguente formula:

		\begin[mode = display]{math}
			D{(C_{1}, C_{2})} = \frac{1}{|C_{1}| |C_{2}|}
			\sum_{i \in C_{1}} \sum_{j \in C_{2}} D{(i, j)} =
			\frac{D(i_{1}, j_{1}) + \unicodeellipsis + D(i_{1}, j_{n}) +
			\unicodeellipsis +  D(i_{m}, j_{1}) + \unicodeellipsis +
			D(i_{m}, j_{n})}{|C_{1}| |C_{2}|}
		\end{math}

		Dato un certo insieme di specie \math{S} di cui é nota la sequenza 
		genomica e data una matrice delle distanze ultrametriche \math{D}, 
		sia \math{T} l'albero ultrametrico che si vuole ottenere. L'algoritmo 
		puó essere descritto come segue:

		\begin{enumerate}
			\begin{item}
				Ciascuna specie \math{S_{1}, S_{2}, \unicodeellipsis, S_{n}} forma un 
				cluster che contiene solo sé stessa, dove ciascuno corrisponde ad un
				nodo foglia dell'albero ultrametrico. Si aggiungano allora a \math{T}
				(inizialmente vuoto) i nodi foglia etichettati da tali cluster;
			\end{item}
			\begin{item}
				Ad ogni nodo \math{v \in T} cosí aggiunto viene assegnato un valore 
				\math{h(v) = 0}, che rappresenta l'altezza di tale nodo;
			\end{item}
			\begin{item}
				Si trovino i due cluster \math{C_{1}} e \math{C_{2}} che hanno minima 
				distanza fra loro, e si fondano in un unico cluster \math{C} avente 
				\math{|C_{1}| + |C_{2}|} elementi;
			\end{item}
			\begin{item}
				Si calcoli la distanza fra ciascun cluster ed il nuovo cluster \math{C}
				cosí costruito;
			\end{item}
			\begin{item}
				Si aggiunga \math{C} ai nodi dell'albero, e lo si colleghi a \math{C_{1}} 
				e a \math{C_{2}} mediante degli archi. \math{C} rappresenta l'antenato 
				comune da cui le specie \math{C_{1}} e \math{C_{2}} si sono separate;
			\end{item}
			\begin{item}
				Si assegni a \math{h(C)} il valore \math{D(C_{1}, C_{2}) / 2};
			\end{item}
			\begin{item}
				Si etichetti l'arco che unisce il nodo \math{C_{1}} al nodo \math{C} con
				\math{h(C) - h(C_{1})}. Allo stesso modo, si etichetti l'arco che unisce 
				il nodo \math{C_{2}} al nodo \math{C} con \math{h(C) - h(C_{2})};
			\end{item}
			\begin{item}
				Si scartino le righe e le colonne di \math{D} relative a \math{C_{1}} e a 
				\math{C_{2}}, e se ne aggiunga una per il nuovo cluster \math{C};
			\end{item}
			\begin{item}
				Se vi sono almeno due cluster rimasti, l'algoritmo ricomincia a partire dal 
				punto 3, altrimenti termina.
			\end{item}
		\end{enumerate}

		\begin{examplebox}
			\begin[width = 30%fw]{parbox}
				\begin[cols = 17.5%fw 17.5%fw 17.5%fw 17.5%fw 17.5%fw 17.5%fw]{ptable}
					\begin{row}
						\cell{} \cell{A} \cell{B} \cell{C} \cell{D} \cell{E}
					\end{row}
					\begin{row}
						\cell{A} \cell{0} \cell{17} \cell{21} \cell{31} \cell{23}
					\end{row}
					\begin{row}
						\cell{B} \cell{17} \cell{0} \cell{30} \cell{34} \cell{21}
					\end{row}
					\begin{row}
						\cell{C} \cell{21} \cell{30} \cell{0} \cell{28} \cell{39}
					\end{row}
					\begin{row}
						\cell{D} \cell{31} \cell{34} \cell{28} \cell{0} \cell{43}
					\end{row}
					\begin{row}
						\cell{E} \cell{23} \cell{21} \cell{39} \cell{43} \cell{0}
					\end{row}
				\end{ptable}
			\end{parbox}
			\begin[width = 70%fw]{parbox}
				\begin[mode = display]{math}
					\table[columnalign = left left]{
						D(AB, C) = & \frac{D(A, C) + D(B, C)}{|\{A, B\}| |\{C\}|} = \frac{21 + 30}{2 \cdot 1} = 25.5 \\
						D(AB, D) = & \frac{D(A, C) + D(B, C)}{|\{A, B\}| |\{D\}|} = \frac{31 + 34}{2 \cdot 1} = 32.5 \\
						D(AB, E) = & \frac{D(A, C) + D(B, C)}{|\{A, B\}| |\{E\}|} = \frac{23 + 21}{2 \cdot 1} = 22 \\
						h(AB) = & \frac{D(A, B)}{2} = \frac{17}{2} = 8.5 \\
					}
				\end{math}
			\end{parbox}
			\par

			\begin[width = 65%fw, strut = character, valign = middle]{parbox}
				\img[src = Filogenesi/upgma.pdf, width = 87.5%fw]
			\end{parbox}
			\begin[width = 35%fw, strut = character, valign = middle]{parbox}
				\begin[cols = 20%fw 20%fw 20%fw 20%fw 20%fw]{ptable}
					\begin{row}
						\cell{} \cell{AB} \cell{C} \cell{D} \cell{E}
					\end{row}
					\begin{row}
						\cell{AB} \cell{0} \cell{25.5} \cell{32.5} \cell{22}
					\end{row}
					\begin{row}
						\cell{C} \cell{25.5} \cell{0} \cell{28} \cell{39}
					\end{row}
					\begin{row}
						\cell{D} \cell{32.5} \cell{28} \cell{0} \cell{43}
					\end{row}
					\begin{row}
						\cell{E} \cell{22} \cell{39} \cell{43} \cell{0}
					\end{row}
				\end{ptable}
			\end{parbox}
		\end{examplebox}

	\subsection{Neighbor Joining}

		\strong{Neighbor Joining} é una estensione di UPGMA che produce un albero 
		additivo anziché ultrametrico. Neighbor Joining introduce un vincolo 
		ulteriore sul come scegliere due cluster da fondere: anziché semplicemente
		fondere due cluster vicini, l'algoritmo fonde due cluster fra loro vicini 
		ma al contempo lontani da tutti gli altri. Sia \math{k} il numero di cluster; 
		il parametro che esprime la "lontananza" di un cluster \math{C} da tutti gli 
		altri é indicato con \math{u(C)}:

		\begin[mode = display]{math}
			u{(C)} = \frac{1}{k - 2} \sum_{C_{i}} D{(C, C_{i})}
		\end{math}

		Nella scelta di quale cluster fondere, Una prima ipotesi sarebbe 
		quella di cercare la coppia di cluster \math{(C_{1}, C_{2})} che 
		contemporaneamente minimizzano \math{D(C_{1}, C_{2})} e massimizzano
		\math{u(C_{1}) + u(C_{2})}, ma é molto difficile che vi siano 
		effettivamente una coppia di cluster con tali caratteristiche. Un
		migliore approccio consiste nel minimizzare la quantitá \math{D(C_{1}, 
		C_{2}) - u(C_{1}) - u(C_{2})}.

		Dato un certo insieme di specie \math{S} di cui é nota la sequenza 
		genomica e data una matrice delle distanze ultrametriche \math{D}, 
		sia \math{T} l'albero additivo che si vuole ottenere. L'algoritmo 
		puó essere descritto come segue:

		\begin{enumerate}
			\begin{item}
				Ciascuna specie \math{S_{1}, S_{2}, \unicodeellipsis, S_{n}} forma un 
				cluster che contiene solo sé stessa, dove ciascuno corrisponde ad un
				nodo foglia dell'albero ultrametrico. Si aggiungano allora a \math{T}
				(inizialmente vuoto) i nodi foglia etichettati da tali cluster;
			\end{item}
			\begin{item}
				Si calcoli il valore \math{u(C_{i})} per ciascun cluster \math{C_{i}};
			\end{item}
			\begin{item}
				Si costruisca una matrice Q che contiene i valori \math{D(C_{1}, C_{2}) - 
				u(C_{1}) - u(C_{2})} per tutte le coppie di cluster \math{(C_{1}, C_{2})};
			\end{item}
			\begin{item}
				Si trovino in Q i due cluster \math{C_{1}} e \math{C_{2}} che minimizzano 
				la quantitá \math{D(C_{1}, C_{2}) - u(C_{1}) - u(C_{2})} e si fondano in 
				un unico cluster \math{C} avente \math{|C_{1}| + |C_{2}|} elementi;
			\end{item}
			\begin{item}
				Per qualsiasi cluster \math{C* \ne C}, si ha \math{D(C, C*) = 
				(D(C_{1}, C*) + D(C_{2}, C*) - D(C_{1}, C_{2})) / 2};
			\end{item}
			\begin{item}
				Si aggiunga \math{C} ai nodi dell'albero, e lo si colleghi a \math{C_{1}} 
				e a \math{C_{2}} mediante degli archi. \math{C} rappresenta l'antenato 
				comune da cui le specie \math{C_{1}} e \math{C_{2}} si sono separate;
			\end{item}
			\begin{item}
				Si etichetti l'arco che unisce il nodo \math{C_{1}} al nodo \math{C} con
				\math{(D(C_{1}, D_{2}) + u(C_{1}) - u(C_{2}))/2}. Allo stesso modo, si 
				etichetti l'arco che unisce il nodo \math{C_{2}} al nodo \math{C} con 
				\math{(D(C_{1}, D_{2}) - u(C_{1}) + u(C_{2}))/2};
			\end{item}
			\begin{item}
				Si scartino le righe e le colonne di \math{D} relative a \math{C_{1}} e a 
				\math{C_{2}}, e se ne aggiunga una per il nuovo cluster \math{C};
			\end{item}
			\begin{item}
				Se vi sono almeno due cluster rimasti, l'algoritmo ricomincia a partire dal 
				punto 2, altrimenti termina.
			\end{item}
		\end{enumerate}

		\begin{examplebox}
			\begin[width = 30%fw]{parbox}
				\begin[cols = 15%fw 15%fw 15%fw 15%fw 15%fw 15%fw]{ptable}
					\begin{row}
						\cell{} \cell{A} \cell{B} \cell{C} \cell{D} \cell{E}
					\end{row}
					\begin{row}
						\cell{A} \cell{0} \cell{5} \cell{9} \cell{9} \cell{8}
					\end{row}
					\begin{row}
						\cell{B} \cell{5} \cell{0} \cell{10} \cell{10} \cell{9}
					\end{row}
					\begin{row}
						\cell{C} \cell{9} \cell{10} \cell{0} \cell{8} \cell{7}
					\end{row}
					\begin{row}
						\cell{D} \cell{9} \cell{10} \cell{8} \cell{0} \cell{3}
					\end{row}
					\begin{row}
						\cell{E} \cell{8} \cell{9} \cell{7} \cell{3} \cell{0}
					\end{row}
				\end{ptable}
			\end{parbox}
			\begin[width = 20%fw]{parbox}
				\begin[cols = 20%fw 45%fw]{ptable}
					\begin{row}
						\cell{A} \cell{10.3}
					\end{row}
					\begin{row}
						\cell{B} \cell{11.3}
					\end{row}
					\begin{row}
						\cell{C} \cell{11.3}
					\end{row}
					\begin{row}
						\cell{D} \cell{10}
					\end{row}
					\begin{row}
						\cell{E} \cell{9}
					\end{row}
				\end{ptable}
			\end{parbox}
			\begin[width = 40%fw]{parbox}
				\begin[cols = 17.5%fw 17.5%fw 17.5%fw 17.5%fw 17.5%fw 17.5%fw]{ptable}
					\begin{row}
						\cell{} \cell{A} \cell{B} \cell{C} \cell{D} \cell{E}
					\end{row}
					\begin{row}
						\cell{A} \cell{/} \cell{-16.6} \cell{-12.6} \cell{-11.3} \cell{-11.3}
					\end{row}
					\begin{row}
						\cell{B} \cell{-16.6} \cell{/} \cell{-12.6} \cell{-11.3} \cell{-11.3}
					\end{row}
					\begin{row}
						\cell{C} \cell{-12.6} \cell{-12.6} \cell{/} \cell{-13.3} \cell{-13.3}
					\end{row}
					\begin{row}
						\cell{D} \cell{-11.3} \cell{-11.3} \cell{-13.3} \cell{/} \cell{-16}
					\end{row}
					\begin{row}
						\cell{E} \cell{-11.3} \cell{-11.3} \cell{-13.3} \cell{-16} \cell{/}
					\end{row}
				\end{ptable}
			\end{parbox}

			\begin[mode = display]{math}
				\table[columnalign = left]{
					u{(A)} = \frac{\sum_{C_{i}} D(A, C_{i})}{5 - 2} = 
						 \frac{D(A, B) + D(A, C) + D(A, D) + D(A, E)}{3} =
						 \frac{5 + 9 + 9 + 8}{3} = \frac{31}{3} \approx 10.3 \\
					u{(B)} = \frac{\sum_{C_{i}} D(B, C_{i})}{5 - 2} = 
						 \frac{D(B, A) + D(B, C) + D(B, D) + D(B, E)}{3} =
						 \frac{5 + 10 + 10 + 9}{3} = \frac{34}{3} \approx 11.3 \\
					u{(C)} = \frac{\sum_{C_{i}} D(C, C_{i})}{5 - 2} = 
						 \frac{D(C, A) + D(C, B) + D(C, D) + D(C, E)}{3} =
						 \frac{9 + 10 + 8 + 7}{3} = \frac{34}{3} \approx 11.3 \\
					u{(D)} = \frac{\sum_{C_{i}} D(D, C_{i})}{5 - 2} = 
						 \frac{D(D, A) + D(D, B) + D(D, C) + D(D, E)}{3} =
						 \frac{9 + 10 + 8 + 3}{3} = \frac{30}{3} = 10 \\
					u{(E)} = \frac{\sum_{C_{i}} D(E, C_{i})}{5 - 2} = 
						 \frac{D(E, A) + D(E, B) + D(E, C) + D(E, D)}{3} =
						 \frac{8 + 9 + 7 + 3}{3} = \frac{27}{3} = 9 \\
				}
			\end{math}

			\begin[width = 70%fw, strut = character, valign = middle]{parbox}
				\img[src = Filogenesi/nj.pdf, width = 87.5%fw]
			\end{parbox}
			\begin[width = 30%fw, strut = character, valign = middle]{parbox}
				\begin[cols = 20%fw 20%fw 20%fw 20%fw 20%fw]{ptable}
					\begin{row}
						\cell{} \cell{AB} \cell{C} \cell{D} \cell{E}
					\end{row}
					\begin{row}
						\cell{AB} \cell{0} \cell{7} \cell{7} \cell{6}
					\end{row}
					\begin{row}
						\cell{C} \cell{7} \cell{0} \cell{8} \cell{7}
					\end{row}
					\begin{row}
						\cell{D} \cell{7} \cell{8} \cell{0} \cell{3}
					\end{row}
					\begin{row}
						\cell{E} \cell{6} \cell{7} \cell{3} \cell{0}
					\end{row}
				\end{ptable}
			\end{parbox}
		\end{examplebox}

		Dato un insieme di \math{n} specie, l'algoritmo Neighbor Joining applicato 
		a tale insieme richiede \math{n - 3} iterazioni. In ciascuna iterazione 
		occorre costruire la matrice \math{Q}, la cui dimensione é \math{n \times 
		n} per la prima iterazione, \math{(n - 1) \times (n - 1)} per la seconda, 
		ecc\math{\unicodeellipsis}, e sulla quale occorre cercare il valore minimo.
		Si ha allora che Neighbor Joining, se implementato in maniera banale, ha
		un tempo di esecuzione \math{O(n^{3})}.

\end{sile}
