\begin{sile}

	In alcune situazioni \footnote{Ad esempio, quando si vuole comparare 
	una stringa codificante con l'intero genoma}, si ha a che fare con 
	coppie di stringhe che non sono, nel complesso, molto simili, ma che 
	hanno delle regioni al loro interno che lo sono. Si definisce il problema 
	dell'\bf{allineamento locale} come la ricerca delle due regioni (di 
	lunghezza fissata), una per ciascuna stringa, che presentano fra loro 
	elevata somiglianza. Piú formalmente, il problema dell'allineamento locale 
	consiste, date due stringhe \math{S_{1}} ed \math{S_{2}}, nel trovare due 
	sottostringhe \math{\alpha} e \math{\beta}, estratte rispettivamente da 
	\math{S_{1}} e da \math{S_{2}}, tali che siano le sottostringhe delle due 
	che hanno fra loro la maggiore somiglianza possibile.

	\begin{examplebox}
		Siano date le stringhe \math{S_{1} = pqraxabcstvq} e \math{S_{2} = 
		xyaxbacsll}. Sia poi data a ciascuna corrispondenza un valore di 2,
		ogni mancata corrispondenza un valore di -2 e ad ogni spazio un valore
		di -1. Le due sottostringhe prese da ciascuna stringa tali che siano le
		piú simili possibili sono \math{\alpha = axabcs} e \math{\beta = axbacs},
		che hanno somiglianza pari ad 8:

		\begin[mode = display]{math}
			\table{
				a & x & a & b & - & c & s \\
				a & x & - & b & a & c & s \\
			}
		\end{math}
	\end{examplebox}

	Siano date due stringhe \math{S_{1}} ed \math{S_{2}} rispettivamente di 
	lunghezza \math{m} ed \math{n}. Per calcolare l'allineamento locale 
	\footnote{Sebbene sia possibile cercare regioni di coppie di stringhe che 
	hanno un alto valore di somiglianza a partire dal loro allineamento globale, 
	spesso capita che queste regioni si "perdano" all'interno dell'allineamento 
	globale. Pertanto, cercare allineamenti locali esplicitamente é piú efficiente 
	che dedurli da un allineamento globale.} in maniera banale occorrerebbe 
	calcolare tutte le possibile sottostringhe di \math{S_{1}}, tutte le possibili
	sottostringhe di \math{S_{2}} e calcolare l'allineamento globale di ciascuna 
	di coppie di sottostringhe cosí ricavare. Il tempo di esecuzione di un 
	algoritmo di questo tipo verrebbe ad essere \math{O(n^{3}m^{3})}.

	Prima di attaccare il problema dell'allineamento locale nella sua 
	interezza, si consideri una versione semplificata del problema in cui 
	si considerano soltanto prefissi delle due stringhe e non sottostringhe 
	generiche. Ovvero, si chiede di trovare i due prefissi \math{\alpha} e 
	\math{\beta} rispettivamente di \math{S_{1}} e \math{S_{2}} tali per cui 
	il loro allineamento globale ottimale ha il valore piú alto dell'allineamento 
	ottimale fra qualsiasi altra coppia di prefissi delle due stringhe.

	Questo problema non é altro che una generalizzazione del problema precedente.
	Infatti, la cella \math{(i, j)} della matrice di programmazione dinamica 
	costruita per determinare l'allineamento globale di due stringhe \math{S_{1}} 
	e \math{S_{2}} specifica il valore dell'allineamento globale ottimale per le
	stringhe \math{S_{1}[1:i]} e \math{S_{2}[1:j]}, che corrisponde alla soluzione
	del problema appena enunciato. Dato che questa matrice é stata costruita in 
	tempo \math{O(nm)}, per determinare i prefissi di due stringhe tali per cui il
	loro allineamento globale é il massimo per qualsiasi coppia di prefissi 
	occorrerá lo stesso tempo.

	% \begin{examplebox}
		% Siano date due stringhe \math{S_{1} = abcxdex} ed \math{S_{2} = xxxcde}, e 
		% sia data una funzione di appaiamento tale per cui un appaiamento corretto 
		% da un contributo di +2 ed un appaiamento non corretto o uno spazio da un 
		% contributo di -1. Si considerino le coppie di indici \math{(3, 4)}, 
		% \math{(4, 5)} e \math{(6, 6)}; si ottengono i seguenti allineamenti:

		% \begin[width = 30%fw]{parbox}
			% \begin[mode = display]{math}
				% S_{1}[1:3] = abc
			% \end{math}
			% \begin[mode = display]{math}
				% S_{2}[1:4] = xxxc
			% \end{math}
			% \begin{center}
				% \begin[cols = 12.5%fw 12.5%fw 12.5%fw 12.5%fw, cellborder = 0]{ptable}
					% \begin{row}
						% \cell{-} \cell{a} \cell{b} \cell{c}
					% \end{row}
					% \begin{row}
						% \cell{x} \cell{x} \cell{x} \cell{c}
					% \end{row}
				% \end{ptable}
			% \end{center}
		% \end{parbox}
		% \begin[width = 32.5%fw]{parbox}
			% \begin[mode = display]{math}
				% S_{1}[1:4] = abcx
			% \end{math}
			% \begin[mode = display]{math}
				% S_{2}[1:5] = xxxcd
			% \end{math}
			% \begin{center}
				% \begin[cols = 12.5%fw 12.5%fw 12.5%fw 12.5%fw 12.5%fw, cellborder = 0]{ptable}
					% \begin{row}
						% \cell{-} \cell{a} \cell{b} \cell{c} \cell{x}
					% \end{row}
					% \begin{row}
						% \cell{x} \cell{x} \cell{x} \cell{c} \cell{d}
					% \end{row}
				% \end{ptable}
			% \end{center}
		% \end{parbox}
		% \begin[width = 37.5%fw]{parbox}
			% \begin[mode = display]{math}
				% S_{1}[1:6] = abcxde
			% \end{math}
			% \begin[mode = display]{math}
				% S_{2}[1:6] = xxxcde
			% \end{math}
			% \begin{center}
				% \begin[cols = 12.5%fw 12.5%fw 12.5%fw 12.5%fw 12.5%fw 12.5%fw 12.5%fw, cellborder = 0]{ptable}
					% \begin{row}
						% \cell{a} \cell{b} \cell{c} \cell{x} \cell{-} \cell{d} \cell{e} 
					% \end{row}
					% \begin{row}
						% \cell{-} \cell{x} \cell{x} \cell{x} \cell{c} \cell{d} \cell{e} 
					% \end{row}
				% \end{ptable}
			% \end{center}
		% \end{parbox}
		% \par

		% Da questi, é possibile dedurre che \math{v(3, 4) = 2} (perché le due \math{c} 
		% combaciano), \math{v(4, 5) = 1} (perché le due \math{c} combaciano, ma \math{x} 
		% e \math{d} no) e \math{v(6, 6) = 5} (perché le due \math{x}, le due \math{d} e 
		% le due \math{e} combaciano, mentre \math{-} e \math{c} no).
	% \end{examplebox}

	% É possibile mettere in relazione il problema dell'allineamento locale con il 
	% problema dell'allineamento locale dei suffissi mostrando che vale il seguente
	% risultato: 

	% \begin[mode = display]{math}
		% v^{*} = \mo[atom = bin]{max}[v(i, j): i \leq n, j \leq m]
	% \end{math}

	% É possibile dimostrare questo teorema come segue. Innanziutto, é facile 
	% intuire che \math{v^{*} \geq \mo[atom = bin]{max}[v(i, j): i \leq n, 
	% j \leq m]}, perché se \math{v(i, j)} é la soluzione ottimale al problema 
	% dell'allineamento locale dei suffissi allora é anche soluzione, non 
	% necessariamente ottimale, anche del problema dell'allineamento locale.
	% Siano invece \math{\alpha} e \math{\beta} le sottostringhe in una 
	% soluzione ottimale, e si supponga che terminino rispettivamente in 
	% posizione \math{i^{*}} e \math{j^{*}}. Si ha allora che \math{\alpha} e
	% \math{\beta} definiscono un allineamento locale dei suffissi per la 
	% coppia di indici \math{i^{*}} e \math{j^{*}}, non necessariamente quella
	% ottimale. Si ha allora \math{v(i^{*}, j^{*}) \geq \mo[atom = bin]{max}[
	% v(i, j): i \leq n, j \leq m]}. Essendo peró che \math{v^{*} \leq v(i^{*}, 
	% j^{*})}, per proprietá transitiva \math{v^{*} \geq \mo[atom = bin]{max}[
	% v(i, j): i \leq n, j \leq m]}. Dato che \math{v^{*}} é contemporaneamente
	% maggiore o uguale e minore o uguale a \math{\mo[atom = bin]{max}[v(i, j): 
	% i \leq n, j \leq m]}, allora le due quantitá devono essere uguali.

	% Passare dall'allineamento locale dei suffissi all'allineamento locale é 
	% immediato: se \math{i^{'}} e \math{j^{'}} formano una coppia di indici che 
	% massimizzano \math{v(i, j)} per qualsiasi possibile coppia di \math{i} e 
	% \math{j}, allora una coppia di sottostringhe che risolvono il problema 
	% dell'allineamento locale dei suffissi per gli indici \math{i^{'}} e 
	% \math{j^{'}} risolvono anche il problema dell'allineamento locale. Si ha
	% quindi che risolvendo il problema dell'allineamento locale dei suffissi 
	% é possibile risolvere anche il (piú generale) problema dell'allineamento 
	% locale.

	% Il problema dell'allineamento locale dei suffissi puó essere risolto tramite 
	% programmazione dinamica. Si ricordi che l'obiettivo consiste nel trovare le
	% due stringhe \math{\alpha} e \math{\beta}, estratte rispettivamente da 
	% \math{S_{1}[1:i]} e \math{S_{2}[1:j]}, tali per cui é massima la loro 
	% somiglianza, e ricavare tale valore. Il caso base é dato da \math{v(i, 0) = 
	% v(0, j) = 0} per ogni \math{i, j}, perché é evidente come il valore di 
	% somiglianza fra una stringa generica e la stringa vuota sia sempre 0. La 
	% relazione di ricorrenza é invece data da:

	% \begin[mode = display]{math}
		% v(i, j) = \mo[atom = bin]{max}[0, v(i - 1, j - 1) + s(S_{1}[i], S_{2}[j]), 
		% v(i - 1, j) + s(S_{1}[i], -), v(i, j - 1) + s(-, S_{2}[j])]
	% \end{math}

	% Dove \math{s(x, y)} é il peso che ha l'accoppiamento del carattere \math{x} 
	% al carattere \math{y}. É possibile dimostrare la relazione di ricorrenza come 
	% segue. Innanzitutto, la presenza dello 0 é data dal fatto che \math{\alpha} 
	% e \math{\beta} possono essere vuote. Tuttavia, se la stringa ottimale 
	% \math{\alpha} non é vuota, allora il carattere \math{S_{1}[i]} é accoppiato
	% ad uno spazio o con il carattere \math{S_{2}[j]}. Allo stesso modo, se la 
	% stringa ottimale \math{\beta} non é vuota, allora il carattere \math{S_{2}[j]} 
	% é accoppiato ad uno spazio o con il carattere \math{S_{1}[i]}.

	% Se le stringhe \math{\alpha} e \math{\beta} non sono vuote, allora il carattere
	% \math{S_{1}[i]} é allineato con \math{S_{2}[j]} nell'allineamento locale dei 
	% suffissi per gli indici \math{i} e \math{j}. Vi sono soltanto tre possibilitá:
	% Sia \math{S_{1}[i]} che \math{S_{2}[j]} sono due caratteri propriamente detti,
	% \math{S_{1}[i]} é un carattere e \math{S_{2}[j]} é uno spazio oppure 
	% \math{S_{2}[j]} é un carattere e \math{S_{1}[i]} é uno spazio.

	% Nel primo caso, i caratteri \math{S_{1}[i]} e \math{S_{2}[j]} danno 
	% un contributo a \math{v(i, j)} pari a \math{s(S_{1}[i], S_{2}[j])}, 
	% ed il contributo rimanente é dato da \math{v(i - 1, j - 1)}, che per 
	% definizione é esso stesso ottimale. Pertanto, se \math{S_{1}[i]} é 
	% allineato con \math{S_{2}[j]}, \math{v(i, j)} é dato da \math{v(i - 1, 
	% j - 1) + s(S_{1}[i], S_{2}[j])}. Nel secondo caso, allora \math{v(i, j)} 
	% si ricava dalla somma del contributo dato da \math{s(S_{1}[i], -)} e dal 
	% contributo dato da \math{v(i - 1, j)}, che é esso stesso ottimale; in 
	% questo caso si ha quindi che \math{v(i, j) = v(i - 1, j) + s(S_{1}[i], -)}. 
	% In maniera sostanzialmente analoga si dimostra che nel terzo caso si ha 
	% \math{v(i, j) = v(i, j - 1) + s(-, S_{2}[j])}.

	% Dato che tutti i possibili casi sono stati esplorati, si ha che \math{v(i, j)}
	% deve valere 0 oppure \math{v(i - 1, j - 1) + s(S_{1}[i], S_{2}[j])} oppure 
	% \math{v(i - 1, j) + s(S_{1}[i], -)} oppure \math{v(i, j - 1) + s(-, S_{2}[j])}.
	% D'altro canto, per ciascuno di questi quattro valori, é sempre possibile 
	% scegliere suffissi di \math{S_{1}[i]} e di \math{S_{2}[j]} tali che il 
	% loro allineamento abbia quel valore. Pertanto, il valore dell'allineamento 
	% ottimale dei suffissi é almeno pari al piú grande fra questi quattro valori.
	% Dato che \math{v(i, j)} é necessariamente uno di questi quattro valori, ed
	% é almeno pari al piú grande fra questi, la relazione é provata.

	% Per calcolare \math{v^{*}} occorre calcolare la tabella di programmazione
	% dinamica per \math{v(i, j)} e dopodiché trovare la cella con il valore piú
	% alto, sia ad esempio quella denotata dagli indici \math{i^{*}} e \math{j^{*}}.
	% Come di consueto, i puntatori vengono creati nel riempire le celle della 
	% tabella. Una volta che la cella \math{(i^{*}, j^{*})} é stata trovata, le
	% sottostringhe \math{\alpha} e \math{\beta} che danno l'allineamento locale
	% ottimale di \math{S_{1}} e di \math{S_{2}} vengono ottenute mediante 
	% backtracking seguendo i puntatori che vanno dalla cella \math{(i^{*}, j^{*})}
	% alla prima cella che vale zero, ad esempio \math{(i^{'}, j^{'})}. Le due
	% stringhe sono allora \math{\alpha = S_{1}[i^{'}:i^{*}]} e \math{\beta = 
	% S_{2}[j^{'}:j^{*}]}.

\end{sile}
