\begin{sile}

	Oltre alla distanza di modifica, un secondo modo per quantificare 
	il confronto fra stringhe é mediante la loro \strong{somiglianza}. Siano 
	\math{S_{1}} ed \math{S_{2}} due stringhe definite su un alfabeto 
	\math{\Sigma}, e sia \math{\Sigma '} l'alfabeto \math{\Sigma} a cui 
	viene aggiunto il carattere speciale \math{-} che indica lo spazio 
	vuoto. Si operi un allineamento globale \math{A} fra la stringa 
	\math{S_{1}} e la stringa \math{S_{2}}, e siano \math{S_{1}'} e 
	\math{S_{2}'} le stringhe precedenti a cui sono stati aggiunti gli 
	spazi durante l'allineamento. Sia infine \math{l} la (medesima) 
	lunghezza delle stringhe \math{S_{1}'} e \math{S_{2}'}.

	L'allineamento \math{A} fra \math{S_{1}'} e \math{S_{2}'} sará quindi 
	costituito da \math{l} coppie di caratteri in \math{\Sigma '} appaiati, 
	uno della prima stringa ed uno della seconda. Come giá detto in precedenza, 
	una coppia di caratteri puó essere formata da due caratteri, ciascuno da 
	una delle due stringhe, oppure da un carattere di una delle due stringhe e 
	da uno spazio, ma mai da due spazi. Per ciascuna possibile coppia di caratteri 
	\math{x} e \math{y} che possa presentarsi, vi si assegni un valore numerico, 
	e si denoti questo valore con \math{s(x, y)}. Questi valori vengono riportati
	in una matrice detta \strong{matrice di score}. La somma di tutti i valori 
	\math{s(x, y)} calcolati su ciascuna delle \math{l} coppie di un allineamento 
	\math{A} viene chiamato \strong{valore} dell'allineamento \math{A}.

	\begin[mode = display]{math}
		\sum_{i = 1}^{l} {s(S_{1}'[i], S_{2}'[i])} = 
		{s(S_{1}'[1], S_{2}'[1])} + {s(S_{1}'[2], S_{2}'[2])} + 
		\unicodeellipsis + {s(S_{1}'[l], S_{2}'[l])}
	\end{math}

	\begin{examplebox}
		\begin[width = 40%fw]{parbox}
			\begin[cols = 15%fw 15%fw 15%fw 15%fw 15%fw 15%fw]{ptable}
				\begin{row}
					\cell{} \cell{a} \cell{b} \cell{c} \cell{d} \cell{-}
				\end{row}
				\begin{row}
					\cell{a} \cell{1} \cell{-1} \cell{-2} \cell{0} \cell{-1}
				\end{row}
				\begin{row}
					\cell{b} \cell{} \cell{3} \cell{-2} \cell{-1} \cell{0}
				\end{row}
				\begin{row}
					\cell{c} \cell{} \cell{} \cell{0} \cell{-4} \cell{-2}
				\end{row}
				\begin{row}
					\cell{d} \cell{} \cell{} \cell{} \cell{3} \cell{-1}
				\end{row}
				\begin{row}
					\cell{-} \cell{} \cell{} \cell{} \cell{} \cell{0}
				\end{row}
			\end{ptable}
		\end{parbox}
		\begin[width = 60%fw]{parbox}
			\begin[mode = display]{math}
				\table{
					c & a & c & - & d & b & d \\
					c & a & b & b & d & b & - \\
				}
			\end{math}

			\begin[mode = display]{math}
				\sum_{i = 1}^{7} {(S_{1}'[i], S_{2}'[i])} = 
				0 + 1 + \unicodeellipsis + 3 - 1 = 4
			\end{math}
		\end{parbox}
	\end{examplebox}

	Ciascun \math{s(x, y)} é un intero che puó essere positivo, negativo o nullo, 
	e non esiste una regola univoca per assegnarvi dei valori "giusti". Inoltre, 
	i valori che vengono assegnati a ciascun \math{s(x, y)} influenzano di molto 
	il valore che ha un allineamento, quindi é cruciale sceglierli in maniera 
	oculata. Di norma, viene associato un valore positivo o nullo a \math{s(x, y)} 
	se \math{x = y} ed un valore negativo se \math{x \ne y}. In questo modo, 
	allineamenti che hanno molti caratteri accoppiati uguali avranno un valore 
	alto, mentre allineamenti che hanno molti caratteri accoppiati diversi e/o 
	che hanno molti caratteri accoppiati ad uno spazio avranno un valore basso.

	Viene chiamato \strong{allineamento ottimale} l'allineamento che, sulla base 
	dell'assegnazione dei valori scelta, ha il valore piú alto di qualsiasi 
	altro allineamento. É allora possibile definire formalmente la somiglianza 
	fra due stringhe come il valore dell'allineamento ottimale. Il valore 
	dell'allineamento ottimale é ottenibile in maniera estremamente inefficiente 
	semplicemente costruendo tutti i possibili allineamenti delle due stringhe, 
	calcolando il valore di ciascuno di questi e compararli per cercare quello
	avente valore maggiore.

	La somiglianza fra due stringhe ed il relativo allineamento ottimale 
	possono essere ricavati in maniera efficiente mediante programmazione 
	dinamica. Si indichi il valore ottimale dell'allineamento di due stringhe 
	\math{S_{1}} e \math{S_{2}} con \math{V(S_{1}, S_{2})}. Indicando con 
	\math{P} il problema della somiglianza fra stringhe rispetto a \math{S_{1}} 
	e \math{S_{2}} per intero, sia \math{P(i, j)} il problema ristretto 
	alle sottostringhe \math{S_{1}[:i]} e \math{S_{2}[:j]}. Indicando con 
	\math{s(i, j)} la soluzione ottimale al problema rispetto alle sottostringhe 
	\math{S_{1}[:i]} e \math{S_{2}[:j]}, sia \math{s*} il valore piú alto fra 
	tutte queste soluzioni ottimali parziali. \math{s*} é la soluzione ottimale 
	del problema rispetto alle stringhe per intero. 

	Il caso base é semplice da determinare; é evidente come due stringhe vuote
	abbiano valore di allineamento ottimale pari a 0. Inoltre, l'allineamento 
	ottimale fra una stringa non vuota e la stringa vuota é una stringa formata
	da tanti \math{-} quanti sono i caratteri della stringa. Pertanto, 
	l'allineamento ottimale fra una stringa non vuota e una stringa vuota é pari
	al valore assegnato alla coppia carattere/spazio moltiplicato per la lunghezza
	della stringa. Si ha quindi:

	\begin[width = 30%fw]{parbox}
		\begin[mode = display]{math}
			V(\epsilon, \epsilon) = 0
		\end{math} 
	\end{parbox} 
	\begin[width = 35%fw]{parbox}
		\begin[mode = display]{math}
			V(S_{1}[:i], \epsilon) = V(S_{1}[:i - 1], \epsilon) + d(S_{1}[i], -) \thickspace \forall i
		\end{math} 
	\end{parbox} 
	\begin[width = 35%fw]{parbox}
		\begin[mode = display]{math}
			V(\epsilon, S_{2}[:j]) = V(\epsilon, S_{2}[:j - 1]) + d(-, S_{2}[j]) \thickspace \forall j
		\end{math} 
	\end{parbox} 
	\par 

	Si consideri ora la relazione di ricorrenza. In ogni iterazione intermedia 
	dell'algoritmo possono presentarsi quattro casistiche, fra loro mutualmente 
	esclusive:

	\begin{enumerate}
		\begin{item}
			L'\math{i}-esimo carattere di \math{S_{1}} é uguale al \math{j}-esimo 
			carattere di \math{S_{2}}, e nessuno dei due é \math{-}. Allora 
			l'allineamento ottimale sará dato dall'allineamento ricavato in 
			precedenza rispetto a \math{S[: |S_{1}| - 1]} e \math{S[: |S_{2}| - 1]}
			(rispettivamente, la prima e la seconda stringa a cui viene rimosso 
			l'ultimo carattere) a cui viene sommato il valore che ha la coppia 
			\math{(S_{1}[i], S_{2}[j])} nella matrice di score;
		\end{item}
		\begin{item}
			L'\math{i}-esimo carattere di \math{S_{1}} é diverso dal \math{j}-esimo 
			carattere di \math{S_{2}}, e nessuno dei due é \math{-}. Allora 
			l'allineamento ottimale sará dato dall'allineamento ricavato in 
			precedenza rispetto a \math{S[: |S_{1}| - 1]} e \math{S[: |S_{2}| - 1]}
			a cui viene sommato il valore che ha la coppia \math{(S_{1}[i], S_{2}[j])} 
			nella matrice di score (il caso é analogo al precedente);
		\end{item}
		\begin{item}
			L'\math{i}-esimo carattere di \math{S_{1}} é \math{-}, mentre il 
			\math{j}-esimo carattere di \math{S_{2}} é diverso da \math{-}. 
			Allora l'allineamento ottimale sará dato dall'allineamento ricavato 
			in precedenza rispetto a \math{S_{1}} e \math{S[: |S_{2}| - 1]} a cui 
			viene sommato il valore che ha la coppia \math{(-, S_{2}[j])} nella 
			matrice di score;
		\end{item}
		\begin{item}
			L'\math{i}-esimo carattere di \math{S_{1}} é diverso da \math{-}, 
			mentre il \math{j}-esimo carattere di \math{S_{2}} é \math{-}.
			Allora l'allineamento ottimale sará dato dall'allineamento ricavato 
			in precedenza rispetto a \math{S[: |S_{1}| - 1]} e \math{S_{2}} a cui 
			viene sommato il valore che ha la coppia \math{(S_{1}[i], -)} nella 
			matrice di score.
		\end{item}
	\end{enumerate}

	\bigskip

	Fra tutti questi valori, occorre scegliere quello che massimizza l'allineamento
	complessivo. Si arriva quindi al seguente passo induttivo:

	\begin[mode = display]{math}
		V[i, j] = \mi{max}
		\{\table{
			V[i - 1, j - 1] + d(S_{1}[i], S_{2}[j]) \\
			V[i, j - 1] + d(-, S_{2}[j]) \\
			V[i - 1, j] + d(S_{1}[i], -) \\
		}
	\end{math}

	Se le stringhe \math{S_{1}} ed \math{S_{2}} hanno lunghezza, rispettivamente,
	\math{n} e \math{m}, la somiglianza fra \math{S_{1}} ed \math{S_{2}} é data da
	\math{V(n, m)}. Mediante programmazione dinamica é possibile costruire una 
	tabella che computi tutti i valori di \math{V(i, j)} fino a \math{V(n, m)}
	in tempo \math{O(nm)}.

	% In maniera simile a quanto fatto per la distanza di modifica, la somiglianza 
	% fra due stringhe puó essere ricavata a partire da un grafo diretto aciclico 
	% chiamato \strong{grafo di allineamento}. Il grafo é concettualmente simile al 
	% grafo pesato di modifica, ma l'etichetta di ciascun arco non é 
	% esclusivamente 0 oppure 1 bensí il peso dato dall'allineamento dei caratteri. 
	% Il nodo iniziale é dato dal valore della cella \math{(0,0)} della tabella di 
	% programmazione dinamica, mentre il nodo finale dalla cella \math{(n,m)}. Si
	% ha peró che la somiglianza non si ricava a partire dal percorso piú corto 
	% che va da \math{(0,0)} a \math{(n,m)}, ma da quello piú lungo. Cosí come i
	% percorsi piú corti del grafo di distanza di modifica sono in corrispondenza 
	% uno-ad-uno con le trascrizioni ottimali fra le due stringhe, i percorsi piú 
	% lunghi del grafo di allineamento sono in corrispondenza uno-ad-uno con gli 
	% allineamenti ottimali fra le due stringhe.

	% In genere calcolare la lunghezza del percorso piú lungo in un grafo é un 
	% problema piuttosto complesso, ma se il grafo é aciclico, non potendo un 
	% percorso "tornare indietro", il calcolo della sua lunghezza é banalmente 
	% proporzionale al numero degli archi del grafo. Dato che il numero di 
	% archi del grafo di allineamento é dato dal prodotto fra \math{n} e 
	% \math{m}, il calcolo della lunghezza del percorso piú lungo a partire dal 
	% grafo di allineamento é un problema che ha tempo di esecuzione \math{O(nm)}.

\end{sile}
