\begin{sile}

	Un \strong{Knowledge Graph} (\strong{KG}) é un grafo
	diretto ed etichettato il cui scopo é riportare e
	trasmettere conoscenze sul mondo reale. I nodi del
	grafo rappresentano delle \strong{entitá}, ovvero
	degli oggetti che appartengono al mondo di interesse,
	mentre gli archi del grafo rappresentano delle
	\strong{relazioni} che intercorrono fra queste entitá.

	"Conoscenza" indica semplicemente qualsiasi cosa sia
	\em{nota}: tale conoscenza puó essere ricavata da dal mondo
	che il grafo vuole modellare oppure estratta dal grafo stesso.
	La conoscenza puó essere composta sia da semplici asserzioni
	che coinvolgono due entitá ("A possiede/fa uso di/fa parte
	di/\ddd B") oppure asserzioni che coinvolgono gruppi di entitá
	("tutti i membri di A possiedono/fanno uso/fanno parte di/\ddd
	B"). Le asserzioni semplici sono riportate come etichette degli
	archi del grafo: se esiste un arco fra i nodi A e B, significa
	che A e B sono legati dalla relazione che etichetta l'arco che
	li unisce.

	Le informazioni codificate all'interno di un knowledge
	graph possono essere infatti espresse come formule in
	una restrizione della logica del primo ordine, mantenendo
	la maggior parte dei costrutti (quantificatori universali,
	relazioni binarie, ecc\ddd) ma escludendone alcuni non
	necessari, come i predicati n-ari ed i simboli di funzione.
	Tutti i knowledge graph hanno la medesima sintassi, ascrivibile
	alla quintupla \math{\langle E, L, T, P, A\rangle}:

	\begin{itemize}
		\begin{item}
			Un insieme \math{E} di simboli, che rappresentano
			gli identificativi associati alle entitá. Nella 
			logica predicativa, equivalgono a delle costanti;
		\end{item}
		\begin{item}
			Un insieme \math{L} di \strong{letterali}, che
			rappresentano tutti i dati "grezzi" che il modello
			necessita di rappresentare (stringhe, numeri, \ddd).
			Nella logica predicativa, equivalgono a delle costanti;
		\end{item}
		\begin{item}
			Un insieme \math{T} di tipi. Nella logica predicativa,
			equivalgono a dei predicati unari;
		\end{item}
		\begin{item}
			Un insieme \math{P} di simboli di relazione. Nella 
			logica predicativa, equivalgono a dei predicati binari;
		\end{item}
		\begin{item}
			Un insieme \math{A} di assiomi.
		\end{item}
	\end{itemize}

	\bigskip

	A loro volta, gli assiomi vengono distinti in due sottogruppi:

	\begin{itemize}
		\begin{item}
			I fatti, ovvero assiomi che riguardano le singole entita.
			Indicano:

			\begin{itemize}
				\begin{item}
					Se una certa entitá appartiene ad un certo tipo,
					ovvero \math{t(e) | t(l)} con \math{e \in E} e
					\math{l \in L};
				\end{item}
				\begin{item}
					Se due entitá sono legate da una certa relazione,
					ovvero \math{r(e_{1}, e_{2}) | r(e, l)} con
					\math{e_{i} \in E} e \math{l \in L}.
				\end{item}
			\end{itemize}
		\end{item}
		\begin{item}
			Gli assiomi generali, ovvero assiomi che non riguardano
			singole entitá ma riguardano classi. In genere sono nella
			forma \math{\forall x (t_{1}(x) \rightarrow t_{2}(x))},
			ovvero che specificano una relazione di ordine parziale
			rispetto ai tipi. Sebbene la loro sintassi sia la medesima
			per tutti i knowledge graph, la loro espressivita varia
			in base a qual'e il linguaggio logico a cui il grafo si
			appoggia.
		\end{item}
	\end{itemize}

	\bigskip

	Nei modelli di database relazionale, i dati sono rigidamente
	strutturati; la struttura é data dallo schema del database
	(che definisce le relazioni, le entitá, gli attributi, ecc\ddd).
	I dati e lo schema sono \em{fortemente accoppiati}, dato che
	lo schema deve necessariamente venire definito prima di poter
	inserire i dati. Inoltre, lo schema é prescrittivo, dato che
	i dati non conformi allo schema non possono venire inseriti nel
	database.

	Nei modelli di database a grafo, i dati sono parzialmente
	strutturati, dato che lo schema "emerge" in maniera implicita
	dal modo in cui sono scritte le triple. I dati e lo schema
	sono \em{debolmente accoppiati}, dato che i dati possono venire
	inseriti prima ancora di definire lo schema \footnote{Questa non
	é comunque una buona pratica, dato che é comunque preferibile
	definire lo schema prima dei dati.}. Inoltre, lo schema non é
	prescrittivo, dato che i dati non conformi alla forma attuale
	dello schema possono venire inseriti comunque, ed una volta
	inseriti ristrutturano lo schema.

	Per tutti questi aspetti, i knowledge graph trovano ampia
	applicazione sia nel web semantico sia nell'intelligenza
	artificiale, dato che in genere ci si trova a lavorare con
	grandi moli di dati provenienti da fonti molto eterogenee
	(in genere dal web). E infatti vantaggioso poter unire tutte
	queste fonti in maniera agile e dinamicamente, aggiungendo 
	o ritrattando dati quando necessario.

	Essendo un KG un grafo, é possibile studiarne le proprietá
	tipiche dei grafi (simmetria, antisimmetria, transitivitá,
	\ddd) e metterle in relazione con il significato che
	hanno nel modello che questi rappresentano. Ad esempio, se
	il grafo e simmetrico, allora ogni relazione fra A e B vale
	anche per B ed A. Inoltre, \em{visitare} un KG permette di
	ricavare informazioni piú elaborate di quelle riportate nei
	soli archi.

	%%%
	%%% Perche non c'e un esempio?
	%%%

\end{sile}
